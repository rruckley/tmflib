{
  "openapi": "3.0.1",
  "info": {
    "title": "Policy Management",
    "description": "**TMF API Reference : TMF - 723 Policy Management**\nThe Policy Management API provides a mechanism to manage policies and supporting domains: Policy Events, Conditions, Actions. It supports creation, update and retrieval of listed entities, including creation, update, retrieval, deletion and notification of events. \nA Policy Management is used only to define Policies. Execution of policies is handled by Policy Application domain.",
    "version": "5.0.0"
  },
  "servers": [
    {
      "url": "https://serverRoot"
    }
  ],
  "tags": [
    {
      "name": "managedPolicy",
      "description": "Operations for ManagedPolicy Resource"
    },
    {
      "name": "managedPolicyCondition",
      "description": "Operations for ManagedPolicyCondition Resource"
    },
    {
      "name": "managedPolicyEvent",
      "description": "Operations for ManagedPolicyEvent Resource"
    },
    {
      "name": "managedPolicyExpression",
      "description": "Operations for ManagedPolicyExpression Resource"
    },
    {
      "name": "managedPolicyOperator",
      "description": "Operations for ManagedPolicyOperator Resource"
    },
    {
      "name": "managedPolicyVariable",
      "description": "Operations for ManagedPolicyVariable Resource"
    },
    {
      "name": "managedPolicyAction",
      "description": "Operations for ManagedPolicyAction Resource"
    },
    {
      "name": "managedPolicyConstraint",
      "description": "Operations for ManagedPolicyConstraint Resource"
    },
    {
      "name": "policyDomain",
      "description": "Operations for PolicyDomain Resource"
    },
    {
      "name": "policyCatalog",
      "description": "Operations for PolicyCatalog Resource"
    },
    {
      "name": "notification listener",
      "description": "Notifications for Resource Lifecycle and event notifications"
    },
    {
      "name": "events subscription",
      "description": "Endpoints to register and terminate an Event Listener"
    }
  ],
  "paths": {
    "/managedPolicy": {
      "get": {
        "tags": [
          "managedPolicy"
        ],
        "summary": "List or find ManagedPolicy objects",
        "description": "This operation retrieves a ManagedPolicy entity. Attribute selection enabled for all first level attributes.",
        "operationId": "listManagedPolicy",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyArray"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "post": {
        "tags": [
          "managedPolicy"
        ],
        "summary": "Creates a ManagedPolicy",
        "description": "This operation creates a ManagedPolicy entity.",
        "operationId": "createManagedPolicy",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicy_FVO"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201ManagedPolicy"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/managedPolicy/{id}": {
      "get": {
        "tags": [
          "managedPolicy"
        ],
        "summary": "Retrieves a ManagedPolicy by ID",
        "description": "List or find ManagedPolicy objects",
        "operationId": "retrieveManagedPolicy",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicy_Get"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "patch": {
        "tags": [
          "managedPolicy"
        ],
        "summary": "Updates partially a ManagedPolicy",
        "description": "This operation updates partially a ManagedPolicy entity.",
        "operationId": "patchManagedPolicy",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicy_MVO"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicy_Patch"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": [
          "managedPolicy"
        ],
        "summary": "Deletes a ManagedPolicy",
        "description": "This operation deletes a ManagedPolicy entity.",
        "operationId": "deleteManagedPolicy",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/listener/managedPolicyCreateEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyCreateEvent",
        "operationId": "managedPolicyCreateEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyCreateEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyAttributeValueChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyAttributeValueChangeEvent",
        "operationId": "managedPolicyAttributeValueChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyAttributeValueChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyDeleteEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyDeleteEvent",
        "operationId": "managedPolicyDeleteEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyDeleteEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyStatusChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyStatusChangeEvent",
        "operationId": "managedPolicyStatusChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyStatusChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/managedPolicyCondition": {
      "get": {
        "tags": [
          "managedPolicyCondition"
        ],
        "summary": "List or find ManagedPolicyCondition objects",
        "description": "This operation retrieves a ManagedPolicyCondition entity. Attribute selection enabled for all first level attributes.",
        "operationId": "listManagedPolicyCondition",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyConditionArray"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "post": {
        "tags": [
          "managedPolicyCondition"
        ],
        "summary": "Creates a ManagedPolicyCondition",
        "description": "This operation creates a ManagedPolicyCondition entity.",
        "operationId": "createManagedPolicyCondition",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyCondition_FVO"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201ManagedPolicyCondition"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/managedPolicyCondition/{id}": {
      "get": {
        "tags": [
          "managedPolicyCondition"
        ],
        "summary": "Retrieves a ManagedPolicyCondition by ID",
        "description": "List or find ManagedPolicyCondition objects",
        "operationId": "retrieveManagedPolicyCondition",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyCondition_Get"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "patch": {
        "tags": [
          "managedPolicyCondition"
        ],
        "summary": "Updates partially a ManagedPolicyCondition",
        "description": "This operation updates partially a ManagedPolicyCondition entity.",
        "operationId": "patchManagedPolicyCondition",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyCondition_MVO"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyCondition_Patch"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": [
          "managedPolicyCondition"
        ],
        "summary": "Deletes a ManagedPolicyCondition",
        "description": "This operation deletes a ManagedPolicyCondition entity.",
        "operationId": "deleteManagedPolicyCondition",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/listener/managedPolicyConditionCreateEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyConditionCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyConditionCreateEvent",
        "operationId": "managedPolicyConditionCreateEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyConditionCreateEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyConditionAttributeValueChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyConditionCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyConditionAttributeValueChangeEvent",
        "operationId": "managedPolicyConditionAttributeValueChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyConditionAttributeValueChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyConditionDeleteEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyConditionCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyConditionDeleteEvent",
        "operationId": "managedPolicyConditionDeleteEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyConditionDeleteEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyConditionStatusChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyConditionCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyConditionStatusChangeEvent",
        "operationId": "managedPolicyConditionStatusChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyConditionStatusChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/managedPolicyEvent": {
      "get": {
        "tags": [
          "managedPolicyEvent"
        ],
        "summary": "List or find ManagedPolicyEvent objects",
        "description": "This operation retrieves a ManagedPolicyEvent entity. Attribute selection enabled for all first level attributes.",
        "operationId": "listManagedPolicyEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyEventArray"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "post": {
        "tags": [
          "managedPolicyEvent"
        ],
        "summary": "Creates a ManagedPolicyEvent",
        "description": "This operation creates a ManagedPolicyEvent entity.",
        "operationId": "createManagedPolicyEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyEvent_FVO"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201ManagedPolicyEvent"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/managedPolicyEvent/{id}": {
      "get": {
        "tags": [
          "managedPolicyEvent"
        ],
        "summary": "Retrieves a ManagedPolicyEvent by ID",
        "description": "List or find ManagedPolicyEvent objects",
        "operationId": "retrieveManagedPolicyEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyEvent_Get"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "patch": {
        "tags": [
          "managedPolicyEvent"
        ],
        "summary": "Updates partially a ManagedPolicyEvent",
        "description": "This operation updates partially a ManagedPolicyEvent entity.",
        "operationId": "patchManagedPolicyEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyEvent_MVO"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyEvent_Patch"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": [
          "managedPolicyEvent"
        ],
        "summary": "Deletes a ManagedPolicyEvent",
        "description": "This operation deletes a ManagedPolicyEvent entity.",
        "operationId": "deleteManagedPolicyEvent",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/listener/managedPolicyEventCreateEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyEventCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyEventCreateEvent",
        "operationId": "managedPolicyEventCreateEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyEventCreateEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyEventAttributeValueChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyEventCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyEventAttributeValueChangeEvent",
        "operationId": "managedPolicyEventAttributeValueChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyEventAttributeValueChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyEventDeleteEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyEventCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyEventDeleteEvent",
        "operationId": "managedPolicyEventDeleteEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyEventDeleteEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyEventStatusChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyEventCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyEventStatusChangeEvent",
        "operationId": "managedPolicyEventStatusChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyEventStatusChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/managedPolicyExpression": {
      "get": {
        "tags": [
          "managedPolicyExpression"
        ],
        "summary": "List or find ManagedPolicyExpression objects",
        "description": "This operation retrieves a ManagedPolicyExpression entity. Attribute selection enabled for all first level attributes.",
        "operationId": "listManagedPolicyExpression",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyExpressionArray"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "post": {
        "tags": [
          "managedPolicyExpression"
        ],
        "summary": "Creates a ManagedPolicyExpression",
        "description": "This operation creates a ManagedPolicyExpression entity.",
        "operationId": "createManagedPolicyExpression",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyExpression_FVO"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201ManagedPolicyExpression"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/managedPolicyExpression/{id}": {
      "get": {
        "tags": [
          "managedPolicyExpression"
        ],
        "summary": "Retrieves a ManagedPolicyExpression by ID",
        "description": "List or find ManagedPolicyExpression objects",
        "operationId": "retrieveManagedPolicyExpression",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyExpression_Get"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "patch": {
        "tags": [
          "managedPolicyExpression"
        ],
        "summary": "Updates partially a ManagedPolicyExpression",
        "description": "This operation updates partially a ManagedPolicyExpression entity.",
        "operationId": "patchManagedPolicyExpression",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyExpression_MVO"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyExpression_Patch"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": [
          "managedPolicyExpression"
        ],
        "summary": "Deletes a ManagedPolicyExpression",
        "description": "This operation deletes a ManagedPolicyExpression entity.",
        "operationId": "deleteManagedPolicyExpression",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/listener/managedPolicyExpressionCreateEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyExpressionCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyExpressionCreateEvent",
        "operationId": "managedPolicyExpressionCreateEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyExpressionCreateEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyExpressionAttributeValueChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyExpressionCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyExpressionAttributeValueChangeEvent",
        "operationId": "managedPolicyExpressionAttributeValueChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyExpressionAttributeValueChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyExpressionDeleteEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyExpressionCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyExpressionDeleteEvent",
        "operationId": "managedPolicyExpressionDeleteEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyExpressionDeleteEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyExpressionStatusChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyExpressionCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyExpressionStatusChangeEvent",
        "operationId": "managedPolicyExpressionStatusChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyExpressionStatusChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/managedPolicyOperator": {
      "get": {
        "tags": [
          "managedPolicyOperator"
        ],
        "summary": "List or find ManagedPolicyOperator objects",
        "description": "This operation retrieves a ManagedPolicyOperator entity. Attribute selection enabled for all first level attributes.",
        "operationId": "listManagedPolicyOperator",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyOperatorArray"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "post": {
        "tags": [
          "managedPolicyOperator"
        ],
        "summary": "Creates a ManagedPolicyOperator",
        "description": "This operation creates a ManagedPolicyOperator entity.",
        "operationId": "createManagedPolicyOperator",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyOperator_FVO"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201ManagedPolicyOperator"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/managedPolicyOperator/{id}": {
      "get": {
        "tags": [
          "managedPolicyOperator"
        ],
        "summary": "Retrieves a ManagedPolicyOperator by ID",
        "description": "List or find ManagedPolicyOperator objects",
        "operationId": "retrieveManagedPolicyOperator",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyOperator_Get"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "patch": {
        "tags": [
          "managedPolicyOperator"
        ],
        "summary": "Updates partially a ManagedPolicyOperator",
        "description": "This operation updates partially a ManagedPolicyOperator entity.",
        "operationId": "patchManagedPolicyOperator",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyOperator_MVO"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyOperator_Patch"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": [
          "managedPolicyOperator"
        ],
        "summary": "Deletes a ManagedPolicyOperator",
        "description": "This operation deletes a ManagedPolicyOperator entity.",
        "operationId": "deleteManagedPolicyOperator",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/listener/managedPolicyOperatorCreateEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyOperatorCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyOperatorCreateEvent",
        "operationId": "managedPolicyOperatorCreateEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyOperatorCreateEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyOperatorAttributeValueChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyOperatorCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyOperatorAttributeValueChangeEvent",
        "operationId": "managedPolicyOperatorAttributeValueChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyOperatorAttributeValueChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyOperatorDeleteEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyOperatorCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyOperatorDeleteEvent",
        "operationId": "managedPolicyOperatorDeleteEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyOperatorDeleteEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyOperatorStatusChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyOperatorCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyOperatorStatusChangeEvent",
        "operationId": "managedPolicyOperatorStatusChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyOperatorStatusChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/managedPolicyVariable": {
      "get": {
        "tags": [
          "managedPolicyVariable"
        ],
        "summary": "List or find ManagedPolicyVariable objects",
        "description": "This operation retrieves a ManagedPolicyVariable entity. Attribute selection enabled for all first level attributes.",
        "operationId": "listManagedPolicyVariable",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyVariableArray"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "post": {
        "tags": [
          "managedPolicyVariable"
        ],
        "summary": "Creates a ManagedPolicyVariable",
        "description": "This operation creates a ManagedPolicyVariable entity.",
        "operationId": "createManagedPolicyVariable",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyVariable_FVO"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201ManagedPolicyVariable"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/managedPolicyVariable/{id}": {
      "get": {
        "tags": [
          "managedPolicyVariable"
        ],
        "summary": "Retrieves a ManagedPolicyVariable by ID",
        "description": "List or find ManagedPolicyVariable objects",
        "operationId": "retrieveManagedPolicyVariable",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyVariable_Get"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "patch": {
        "tags": [
          "managedPolicyVariable"
        ],
        "summary": "Updates partially a ManagedPolicyVariable",
        "description": "This operation updates partially a ManagedPolicyVariable entity.",
        "operationId": "patchManagedPolicyVariable",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyVariable_MVO"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyVariable_Patch"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": [
          "managedPolicyVariable"
        ],
        "summary": "Deletes a ManagedPolicyVariable",
        "description": "This operation deletes a ManagedPolicyVariable entity.",
        "operationId": "deleteManagedPolicyVariable",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/listener/managedPolicyVariableCreateEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyVariableCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyVariableCreateEvent",
        "operationId": "managedPolicyVariableCreateEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyVariableCreateEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyVariableAttributeValueChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyVariableCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyVariableAttributeValueChangeEvent",
        "operationId": "managedPolicyVariableAttributeValueChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyVariableAttributeValueChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyVariableDeleteEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyVariableCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyVariableDeleteEvent",
        "operationId": "managedPolicyVariableDeleteEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyVariableDeleteEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyVariableStatusChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyVariableCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyVariableStatusChangeEvent",
        "operationId": "managedPolicyVariableStatusChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyVariableStatusChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/managedPolicyAction": {
      "get": {
        "tags": [
          "managedPolicyAction"
        ],
        "summary": "List or find ManagedPolicyAction objects",
        "description": "This operation retrieves a ManagedPolicyAction entity. Attribute selection enabled for all first level attributes.",
        "operationId": "listManagedPolicyAction",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyActionArray"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "post": {
        "tags": [
          "managedPolicyAction"
        ],
        "summary": "Creates a ManagedPolicyAction",
        "description": "This operation creates a ManagedPolicyAction entity.",
        "operationId": "createManagedPolicyAction",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyAction_FVO"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201ManagedPolicyAction"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/managedPolicyAction/{id}": {
      "get": {
        "tags": [
          "managedPolicyAction"
        ],
        "summary": "Retrieves a ManagedPolicyAction by ID",
        "description": "List or find ManagedPolicyAction objects",
        "operationId": "retrieveManagedPolicyAction",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyAction_Get"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "patch": {
        "tags": [
          "managedPolicyAction"
        ],
        "summary": "Updates partially a ManagedPolicyAction",
        "description": "This operation updates partially a ManagedPolicyAction entity.",
        "operationId": "patchManagedPolicyAction",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyAction_MVO"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyAction_Patch"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": [
          "managedPolicyAction"
        ],
        "summary": "Deletes a ManagedPolicyAction",
        "description": "This operation deletes a ManagedPolicyAction entity.",
        "operationId": "deleteManagedPolicyAction",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/listener/managedPolicyActionCreateEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyActionCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyActionCreateEvent",
        "operationId": "managedPolicyActionCreateEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyActionCreateEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyActionAttributeValueChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyActionCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyActionAttributeValueChangeEvent",
        "operationId": "managedPolicyActionAttributeValueChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyActionAttributeValueChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyActionDeleteEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyActionCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyActionDeleteEvent",
        "operationId": "managedPolicyActionDeleteEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyActionDeleteEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyActionStatusChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyActionCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyActionStatusChangeEvent",
        "operationId": "managedPolicyActionStatusChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyActionStatusChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/managedPolicyConstraint": {
      "get": {
        "tags": [
          "managedPolicyConstraint"
        ],
        "summary": "List or find ManagedPolicyConstraint objects",
        "description": "This operation retrieves a ManagedPolicyConstraint entity. Attribute selection enabled for all first level attributes.",
        "operationId": "listManagedPolicyConstraint",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyConstraintArray"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "post": {
        "tags": [
          "managedPolicyConstraint"
        ],
        "summary": "Creates a ManagedPolicyConstraint",
        "description": "This operation creates a ManagedPolicyConstraint entity.",
        "operationId": "createManagedPolicyConstraint",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyConstraint_FVO"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201ManagedPolicyConstraint"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/managedPolicyConstraint/{id}": {
      "get": {
        "tags": [
          "managedPolicyConstraint"
        ],
        "summary": "Retrieves a ManagedPolicyConstraint by ID",
        "description": "List or find ManagedPolicyConstraint objects",
        "operationId": "retrieveManagedPolicyConstraint",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyConstraint_Get"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "patch": {
        "tags": [
          "managedPolicyConstraint"
        ],
        "summary": "Updates partially a ManagedPolicyConstraint",
        "description": "This operation updates partially a ManagedPolicyConstraint entity.",
        "operationId": "patchManagedPolicyConstraint",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyConstraint_MVO"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200ManagedPolicyConstraint_Patch"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": [
          "managedPolicyConstraint"
        ],
        "summary": "Deletes a ManagedPolicyConstraint",
        "description": "This operation deletes a ManagedPolicyConstraint entity.",
        "operationId": "deleteManagedPolicyConstraint",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/listener/managedPolicyConstraintCreateEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyConstraintCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyConstraintCreateEvent",
        "operationId": "managedPolicyConstraintCreateEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyConstraintCreateEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyConstraintAttributeValueChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyConstraintCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyConstraintAttributeValueChangeEvent",
        "operationId": "managedPolicyConstraintAttributeValueChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyConstraintAttributeValueChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyConstraintDeleteEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyConstraintCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyConstraintDeleteEvent",
        "operationId": "managedPolicyConstraintDeleteEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyConstraintDeleteEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/managedPolicyConstraintStatusChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity ManagedPolicyConstraintCreateEvent",
        "description": "Example of a client listener for receiving the notification ManagedPolicyConstraintStatusChangeEvent",
        "operationId": "managedPolicyConstraintStatusChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/ManagedPolicyConstraintStatusChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/policyDomain": {
      "get": {
        "tags": [
          "policyDomain"
        ],
        "summary": "List or find PolicyDomain objects",
        "description": "This operation retrieves a PolicyDomain entity. Attribute selection enabled for all first level attributes.",
        "operationId": "listPolicyDomain",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200PolicyDomainArray"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "post": {
        "tags": [
          "policyDomain"
        ],
        "summary": "Creates a PolicyDomain",
        "description": "This operation creates a PolicyDomain entity.",
        "operationId": "createPolicyDomain",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PolicyDomain_FVO"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201PolicyDomain"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/policyDomain/{id}": {
      "get": {
        "tags": [
          "policyDomain"
        ],
        "summary": "Retrieves a PolicyDomain by ID",
        "description": "List or find PolicyDomain objects",
        "operationId": "retrievePolicyDomain",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200PolicyDomain_Get"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "patch": {
        "tags": [
          "policyDomain"
        ],
        "summary": "Updates partially a PolicyDomain",
        "description": "This operation updates partially a PolicyDomain entity.",
        "operationId": "patchPolicyDomain",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PolicyDomain_MVO"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200PolicyDomain_Patch"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": [
          "policyDomain"
        ],
        "summary": "Deletes a PolicyDomain",
        "description": "This operation deletes a PolicyDomain entity.",
        "operationId": "deletePolicyDomain",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/listener/policyDomainCreateEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity PolicyDomainCreateEvent",
        "description": "Example of a client listener for receiving the notification PolicyDomainCreateEvent",
        "operationId": "policyDomainCreateEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/PolicyDomainCreateEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/policyDomainAttributeValueChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity PolicyDomainCreateEvent",
        "description": "Example of a client listener for receiving the notification PolicyDomainAttributeValueChangeEvent",
        "operationId": "policyDomainAttributeValueChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/PolicyDomainAttributeValueChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/policyDomainDeleteEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity PolicyDomainCreateEvent",
        "description": "Example of a client listener for receiving the notification PolicyDomainDeleteEvent",
        "operationId": "policyDomainDeleteEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/PolicyDomainDeleteEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/policyDomainStatusChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity PolicyDomainCreateEvent",
        "description": "Example of a client listener for receiving the notification PolicyDomainStatusChangeEvent",
        "operationId": "policyDomainStatusChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/PolicyDomainStatusChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/policyCatalog": {
      "get": {
        "tags": [
          "policyCatalog"
        ],
        "summary": "List or find PolicyCatalog objects",
        "description": "This operation retrieves a PolicyCatalog entity. Attribute selection enabled for all first level attributes.",
        "operationId": "listPolicyCatalog",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Offset"
          },
          {
            "$ref": "#/components/parameters/Limit"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200PolicyCatalogArray"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "post": {
        "tags": [
          "policyCatalog"
        ],
        "summary": "Creates a PolicyCatalog",
        "description": "This operation creates a PolicyCatalog entity.",
        "operationId": "createPolicyCatalog",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PolicyCatalog_FVO"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/201PolicyCatalog"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/policyCatalog/{id}": {
      "get": {
        "tags": [
          "policyCatalog"
        ],
        "summary": "Retrieves a PolicyCatalog by ID",
        "description": "List or find PolicyCatalog objects",
        "operationId": "retrievePolicyCatalog",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/components/responses/200PolicyCatalog_Get"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "patch": {
        "tags": [
          "policyCatalog"
        ],
        "summary": "Updates partially a PolicyCatalog",
        "description": "This operation updates partially a PolicyCatalog entity.",
        "operationId": "patchPolicyCatalog",
        "parameters": [
          {
            "$ref": "#/components/parameters/Fields"
          },
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PolicyCatalog_MVO"
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/200PolicyCatalog_Patch"
          },
          "202": {
            "description": "Accepted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      },
      "delete": {
        "tags": [
          "policyCatalog"
        ],
        "summary": "Deletes a PolicyCatalog",
        "description": "This operation deletes a PolicyCatalog entity.",
        "operationId": "deletePolicyCatalog",
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "204": {
            "$ref": "#/components/responses/204"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "405": {
            "$ref": "#/components/responses/405"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          },
          "501": {
            "$ref": "#/components/responses/501"
          },
          "503": {
            "$ref": "#/components/responses/503"
          }
        }
      }
    },
    "/listener/policyCatalogCreateEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity PolicyCatalogCreateEvent",
        "description": "Example of a client listener for receiving the notification PolicyCatalogCreateEvent",
        "operationId": "policyCatalogCreateEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/PolicyCatalogCreateEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/policyCatalogAttributeValueChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity PolicyCatalogCreateEvent",
        "description": "Example of a client listener for receiving the notification PolicyCatalogAttributeValueChangeEvent",
        "operationId": "policyCatalogAttributeValueChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/PolicyCatalogAttributeValueChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/policyCatalogDeleteEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity PolicyCatalogCreateEvent",
        "description": "Example of a client listener for receiving the notification PolicyCatalogDeleteEvent",
        "operationId": "policyCatalogDeleteEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/PolicyCatalogDeleteEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/listener/policyCatalogStatusChangeEvent": {
      "post": {
        "tags": [
          "notification listener"
        ],
        "summary": "Client listener for entity PolicyCatalogCreateEvent",
        "description": "Example of a client listener for receiving the notification PolicyCatalogStatusChangeEvent",
        "operationId": "policyCatalogStatusChangeEvent",
        "requestBody": {
          "$ref": "#/components/requestBodies/PolicyCatalogStatusChangeEvent"
        },
        "responses": {
          "204": {
            "description": "Notified"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/hub": {
      "post": {
        "operationId": "createHub",
        "summary": "Create a subscription (hub) to receive Events",
        "description": "Sets the communication endpoint to receive Events.",
        "tags": [
          "events subscription"
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/Hub_FVO"
        },
        "responses": {
          "201": {
            "$ref": "#/components/responses/Hub"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    },
    "/hub/{id}": {
      "delete": {
        "operationId": "hubDelete",
        "summary": "Remove a subscription (hub) to receive Events",
        "description": "",
        "tags": [
          "events subscription"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/Id"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "default": {
            "$ref": "#/components/responses/Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Addressable": {
        "type": "object",
        "description": "Base schema for adressable entities",
        "properties": {
          "href": {
            "type": "string",
            "description": "Hyperlink reference"
          },
          "id": {
            "type": "string",
            "description": "unique identifier"
          }
        },
        "required": [
          "id",
          "href"
        ]
      },
      "Addressable_FVO": {
        "type": "object",
        "description": "Base schema for adressable entities",
        "properties": {
          "id": {
            "type": "string",
            "description": "unique identifier"
          }
        }
      },
      "AnyValue": {
        "nullable": true,
        "anyOf": [
          {
            "type": "string"
          },
          {
            "type": "integer"
          },
          {
            "type": "number"
          },
          {
            "type": "boolean"
          },
          {
            "type": "object"
          },
          {
            "type": "array"
          }
        ]
      },
      "BaseEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "type": "object",
            "description": "Base event with common attributes.",
            "properties": {
              "event": {
                "type": "object"
              },
              "eventId": {
                "type": "string",
                "description": "The identifier of the notification."
              },
              "eventTime": {
                "type": "string",
                "format": "date-time",
                "description": "Time of the event occurrence."
              },
              "eventType": {
                "type": "string",
                "description": "The type of the notification."
              },
              "correlationId": {
                "type": "string",
                "description": "The correlation id for this event."
              },
              "domain": {
                "type": "string",
                "description": "The domain of the event."
              },
              "title": {
                "type": "string",
                "description": "The title of the event."
              },
              "description": {
                "type": "string",
                "description": "An explanatory of the event."
              },
              "priority": {
                "type": "string",
                "description": "A priority."
              },
              "timeOcurred": {
                "type": "string",
                "format": "date-time",
                "description": "The time the event occured."
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "BaseEvent": "#/components/schemas/BaseEvent"
          }
        }
      },
      "Characteristic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Describes a given characteristic of an object or entity through a name/value pair.",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "valueType": {
                "type": "string",
                "description": "Data type of the value of the characteristic"
              },
              "characteristicRelationship": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CharacteristicRelationship"
                }
              },
              "name": {
                "type": "string",
                "description": "Name of the characteristic"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Characteristic": "#/components/schemas/Characteristic"
          }
        }
      },
      "CharacteristicRelationship": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Another Characteristic that is related to the current Characteristic;",
            "properties": {
              "id": {
                "type": "string",
                "description": "Unique identifier of the characteristic"
              },
              "relationshipType": {
                "type": "string",
                "description": "The type of relationship"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "CharacteristicRelationship": "#/components/schemas/CharacteristicRelationship"
          }
        }
      },
      "Entity": {
        "type": "object",
        "description": "Base entity schema for use in TMForum Open-APIs. Property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/Addressable"
          }
        ]
      },
      "EntityRef": {
        "type": "object",
        "description": "Entity reference schema to be use for all entityRef class.",
        "properties": {
          "href": {
            "type": "string",
            "description": "Hyperlink reference"
          }
        }
      },
      "Entity_FVO": {
        "type": "object",
        "description": "Base entity schema for use in TMForum Open-APIs. Property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "$ref": "#/components/schemas/Addressable_FVO"
          }
        ]
      },
      "Entity_MVO": {
        "type": "object",
        "description": "Base entity schema for use in TMForum Open-APIs. Property.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          }
        ]
      },
      "Event": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "event with common attributes.",
            "properties": {
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "correlationId": {
                "type": "string",
                "description": "The correlation id for this event."
              },
              "domain": {
                "type": "string",
                "description": "The domain of the event."
              },
              "title": {
                "type": "string",
                "description": "The title of the event."
              },
              "description": {
                "type": "string",
                "description": "An explnatory of the event."
              },
              "priority": {
                "type": "string",
                "description": "A priority."
              },
              "timeOccurred": {
                "type": "string",
                "format": "date-time",
                "description": "The time the event occurred."
              },
              "source": {
                "$ref": "#/components/schemas/EntityRef"
              },
              "reportingSystem": {
                "$ref": "#/components/schemas/EntityRef"
              },
              "relatedParty": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RelatedParty"
                }
              },
              "analyticCharacteristic": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Characteristic"
                }
              },
              "eventId": {
                "type": "string",
                "description": "The identifier of the notification."
              },
              "eventTime": {
                "type": "string",
                "format": "date-time",
                "description": "Time of the event occurrence."
              },
              "eventType": {
                "type": "string",
                "description": "The type of the notification."
              },
              "event": {
                "description": "The event linked to the involved resource object",
                "type": "object"
              }
            }
          }
        ]
      },
      "Extensible": {
        "type": "object",
        "description": "Base Extensible schema for use in TMForum Open-APIs - When used for in a schema it means that the Entity described by the schema  MUST be extended with the @type",
        "properties": {
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          }
        },
        "required": [
          "@type"
        ]
      },
      "Extensible_FVO": {
        "type": "object",
        "description": "Base Extensible schema for use in TMForum Open-APIs - When used for in a schema it means that the Entity described by the schema  MUST be extended with the @type",
        "properties": {
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          }
        },
        "required": [
          "@type"
        ]
      },
      "Extensible_FVO_FVO": {
        "type": "object",
        "description": "Base Extensible schema for use in TMForum Open-APIs - When used for in a schema it means that the Entity described by the schema  MUST be extended with the @type",
        "properties": {
          "@type": {
            "type": "string",
            "description": "When sub-classing, this defines the sub-class Extensible name"
          },
          "@baseType": {
            "type": "string",
            "description": "When sub-classing, this defines the super-class"
          },
          "@schemaLocation": {
            "type": "string",
            "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
          }
        },
        "required": [
          "@type"
        ]
      },
      "ManagedPolicy": {
        "description": "Managed Policy",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity"
          },
          {
            "$ref": "#/components/schemas/Policy"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicy": "#/components/schemas/ManagedPolicy"
          }
        }
      },
      "ManagedPolicyAction": {
        "description": "Managed PolicyAction",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity"
          },
          {
            "$ref": "#/components/schemas/PolicyAction"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction"
          }
        }
      },
      "ManagedPolicyActionAttributeValueChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyActionAttributeValueChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyActionAttributeValueChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyActionAttributeValueChangeEvent": "#/components/schemas/ManagedPolicyActionAttributeValueChangeEvent"
          }
        }
      },
      "ManagedPolicyActionAttributeValueChangeEventPayload": {
        "type": "object",
        "description": "ManagedPolicyActionAttributeValueChangeEventPayload generic structure",
        "properties": {
          "managedPolicyAction": {
            "$ref": "#/components/schemas/ManagedPolicyAction"
          }
        }
      },
      "ManagedPolicyActionCreateEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyActionCreateEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyActionCreateEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyActionCreateEvent": "#/components/schemas/ManagedPolicyActionCreateEvent"
          }
        }
      },
      "ManagedPolicyActionCreateEventPayload": {
        "type": "object",
        "description": "ManagedPolicyActionCreateEventPayload generic structure",
        "properties": {
          "managedPolicyAction": {
            "$ref": "#/components/schemas/ManagedPolicyAction"
          }
        }
      },
      "ManagedPolicyActionDeleteEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyActionDeleteEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyActionDeleteEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyActionDeleteEvent": "#/components/schemas/ManagedPolicyActionDeleteEvent"
          }
        }
      },
      "ManagedPolicyActionDeleteEventPayload": {
        "type": "object",
        "description": "ManagedPolicyActionDeleteEventPayload generic structure",
        "properties": {
          "managedPolicyAction": {
            "$ref": "#/components/schemas/ManagedPolicyAction"
          }
        }
      },
      "ManagedPolicyActionStateChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyActionStateChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyActionStateChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyActionStateChangeEvent": "#/components/schemas/ManagedPolicyActionStateChangeEvent"
          }
        }
      },
      "ManagedPolicyActionStateChangeEventPayload": {
        "type": "object",
        "description": "ManagedPolicyActionStateChangeEventPayload generic structure",
        "properties": {
          "managedPolicyAction": {
            "$ref": "#/components/schemas/ManagedPolicyAction"
          }
        }
      },
      "ManagedPolicyAction_FVO": {
        "description": "Managed PolicyAction",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicyAction_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction_FVO"
          }
        }
      },
      "ManagedPolicyAction_MVO": {
        "description": "Managed PolicyAction",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicyAction_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction_MVO"
          }
        }
      },
      "ManagedPolicyAttributeValueChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyAttributeValueChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyAttributeValueChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyAttributeValueChangeEvent": "#/components/schemas/ManagedPolicyAttributeValueChangeEvent"
          }
        }
      },
      "ManagedPolicyAttributeValueChangeEventPayload": {
        "type": "object",
        "description": "ManagedPolicyAttributeValueChangeEventPayload generic structure",
        "properties": {
          "managedPolicy": {
            "$ref": "#/components/schemas/ManagedPolicy"
          }
        }
      },
      "ManagedPolicyCondition": {
        "description": "Managed PolicyCondition",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity"
          },
          {
            "$ref": "#/components/schemas/PolicyCondition"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition"
          }
        }
      },
      "ManagedPolicyConditionAttributeValueChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyConditionAttributeValueChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyConditionAttributeValueChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyConditionAttributeValueChangeEvent": "#/components/schemas/ManagedPolicyConditionAttributeValueChangeEvent"
          }
        }
      },
      "ManagedPolicyConditionAttributeValueChangeEventPayload": {
        "type": "object",
        "description": "ManagedPolicyConditionAttributeValueChangeEventPayload generic structure",
        "properties": {
          "managedPolicyCondition": {
            "$ref": "#/components/schemas/ManagedPolicyCondition"
          }
        }
      },
      "ManagedPolicyConditionCreateEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyConditionCreateEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyConditionCreateEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyConditionCreateEvent": "#/components/schemas/ManagedPolicyConditionCreateEvent"
          }
        }
      },
      "ManagedPolicyConditionCreateEventPayload": {
        "type": "object",
        "description": "ManagedPolicyConditionCreateEventPayload generic structure",
        "properties": {
          "managedPolicyCondition": {
            "$ref": "#/components/schemas/ManagedPolicyCondition"
          }
        }
      },
      "ManagedPolicyConditionDeleteEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyConditionDeleteEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyConditionDeleteEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyConditionDeleteEvent": "#/components/schemas/ManagedPolicyConditionDeleteEvent"
          }
        }
      },
      "ManagedPolicyConditionDeleteEventPayload": {
        "type": "object",
        "description": "ManagedPolicyConditionDeleteEventPayload generic structure",
        "properties": {
          "managedPolicyCondition": {
            "$ref": "#/components/schemas/ManagedPolicyCondition"
          }
        }
      },
      "ManagedPolicyConditionStateChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyConditionStateChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyConditionStateChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyConditionStateChangeEvent": "#/components/schemas/ManagedPolicyConditionStateChangeEvent"
          }
        }
      },
      "ManagedPolicyConditionStateChangeEventPayload": {
        "type": "object",
        "description": "ManagedPolicyConditionStateChangeEventPayload generic structure",
        "properties": {
          "managedPolicyCondition": {
            "$ref": "#/components/schemas/ManagedPolicyCondition"
          }
        }
      },
      "ManagedPolicyCondition_FVO": {
        "description": "Managed PolicyCondition",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicyCondition_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition_FVO"
          }
        }
      },
      "ManagedPolicyCondition_MVO": {
        "description": "Managed PolicyCondition",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicyCondition_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition_MVO"
          }
        }
      },
      "ManagedPolicyConstraint": {
        "description": "Managed PolicyConstraint",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity"
          },
          {
            "$ref": "#/components/schemas/PolicyConstraint"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint"
          }
        }
      },
      "ManagedPolicyConstraintAttributeValueChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyConstraintAttributeValueChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyConstraintAttributeValueChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyConstraintAttributeValueChangeEvent": "#/components/schemas/ManagedPolicyConstraintAttributeValueChangeEvent"
          }
        }
      },
      "ManagedPolicyConstraintAttributeValueChangeEventPayload": {
        "type": "object",
        "description": "ManagedPolicyConstraintAttributeValueChangeEventPayload generic structure",
        "properties": {
          "managedPolicyConstraint": {
            "$ref": "#/components/schemas/ManagedPolicyConstraint"
          }
        }
      },
      "ManagedPolicyConstraintCreateEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyConstraintCreateEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyConstraintCreateEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyConstraintCreateEvent": "#/components/schemas/ManagedPolicyConstraintCreateEvent"
          }
        }
      },
      "ManagedPolicyConstraintCreateEventPayload": {
        "type": "object",
        "description": "ManagedPolicyConstraintCreateEventPayload generic structure",
        "properties": {
          "managedPolicyConstraint": {
            "$ref": "#/components/schemas/ManagedPolicyConstraint"
          }
        }
      },
      "ManagedPolicyConstraintDeleteEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyConstraintDeleteEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyConstraintDeleteEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyConstraintDeleteEvent": "#/components/schemas/ManagedPolicyConstraintDeleteEvent"
          }
        }
      },
      "ManagedPolicyConstraintDeleteEventPayload": {
        "type": "object",
        "description": "ManagedPolicyConstraintDeleteEventPayload generic structure",
        "properties": {
          "managedPolicyConstraint": {
            "$ref": "#/components/schemas/ManagedPolicyConstraint"
          }
        }
      },
      "ManagedPolicyConstraintStateChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyConstraintStateChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyConstraintStateChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyConstraintStateChangeEvent": "#/components/schemas/ManagedPolicyConstraintStateChangeEvent"
          }
        }
      },
      "ManagedPolicyConstraintStateChangeEventPayload": {
        "type": "object",
        "description": "ManagedPolicyConstraintStateChangeEventPayload generic structure",
        "properties": {
          "managedPolicyConstraint": {
            "$ref": "#/components/schemas/ManagedPolicyConstraint"
          }
        }
      },
      "ManagedPolicyConstraint_FVO": {
        "description": "Managed PolicyConstraint",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicyConstraint_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint_FVO"
          }
        }
      },
      "ManagedPolicyConstraint_MVO": {
        "description": "Managed PolicyConstraint",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicyConstraint_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint_MVO"
          }
        }
      },
      "ManagedPolicyCreateEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyCreateEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyCreateEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyCreateEvent": "#/components/schemas/ManagedPolicyCreateEvent"
          }
        }
      },
      "ManagedPolicyCreateEventPayload": {
        "type": "object",
        "description": "ManagedPolicyCreateEventPayload generic structure",
        "properties": {
          "managedPolicy": {
            "$ref": "#/components/schemas/ManagedPolicy"
          }
        }
      },
      "ManagedPolicyDeleteEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyDeleteEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyDeleteEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyDeleteEvent": "#/components/schemas/ManagedPolicyDeleteEvent"
          }
        }
      },
      "ManagedPolicyDeleteEventPayload": {
        "type": "object",
        "description": "ManagedPolicyDeleteEventPayload generic structure",
        "properties": {
          "managedPolicy": {
            "$ref": "#/components/schemas/ManagedPolicy"
          }
        }
      },
      "ManagedPolicyEvent": {
        "description": "Managed PolicyEvent",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity"
          },
          {
            "$ref": "#/components/schemas/PolicyEvent"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyEvent": "#/components/schemas/ManagedPolicyEvent"
          }
        }
      },
      "ManagedPolicyEventAttributeValueChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyEventAttributeValueChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyEventAttributeValueChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyEventAttributeValueChangeEvent": "#/components/schemas/ManagedPolicyEventAttributeValueChangeEvent"
          }
        }
      },
      "ManagedPolicyEventAttributeValueChangeEventPayload": {
        "type": "object",
        "description": "ManagedPolicyEventAttributeValueChangeEventPayload generic structure",
        "properties": {
          "managedPolicyEvent": {
            "$ref": "#/components/schemas/ManagedPolicyEvent"
          }
        }
      },
      "ManagedPolicyEventCreateEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyEventCreateEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyEventCreateEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyEventCreateEvent": "#/components/schemas/ManagedPolicyEventCreateEvent"
          }
        }
      },
      "ManagedPolicyEventCreateEventPayload": {
        "type": "object",
        "description": "ManagedPolicyEventCreateEventPayload generic structure",
        "properties": {
          "managedPolicyEvent": {
            "$ref": "#/components/schemas/ManagedPolicyEvent"
          }
        }
      },
      "ManagedPolicyEventDeleteEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyEventDeleteEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyEventDeleteEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyEventDeleteEvent": "#/components/schemas/ManagedPolicyEventDeleteEvent"
          }
        }
      },
      "ManagedPolicyEventDeleteEventPayload": {
        "type": "object",
        "description": "ManagedPolicyEventDeleteEventPayload generic structure",
        "properties": {
          "managedPolicyEvent": {
            "$ref": "#/components/schemas/ManagedPolicyEvent"
          }
        }
      },
      "ManagedPolicyEventStateChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyEventStateChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyEventStateChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyEventStateChangeEvent": "#/components/schemas/ManagedPolicyEventStateChangeEvent"
          }
        }
      },
      "ManagedPolicyEventStateChangeEventPayload": {
        "type": "object",
        "description": "ManagedPolicyEventStateChangeEventPayload generic structure",
        "properties": {
          "managedPolicyEvent": {
            "$ref": "#/components/schemas/ManagedPolicyEvent"
          }
        }
      },
      "ManagedPolicyEvent_FVO": {
        "description": "Managed PolicyEvent",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicyEvent_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyEvent": "#/components/schemas/ManagedPolicyEvent_FVO"
          }
        }
      },
      "ManagedPolicyEvent_MVO": {
        "description": "Managed PolicyEvent",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicyEvent_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyEvent": "#/components/schemas/ManagedPolicyEvent_MVO"
          }
        }
      },
      "ManagedPolicyExpression": {
        "description": "Managed PolicyExpression",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity"
          },
          {
            "$ref": "#/components/schemas/PolicyExpression"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyExpression": "#/components/schemas/ManagedPolicyExpression"
          }
        }
      },
      "ManagedPolicyExpressionAttributeValueChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyExpressionAttributeValueChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyExpressionAttributeValueChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyExpressionAttributeValueChangeEvent": "#/components/schemas/ManagedPolicyExpressionAttributeValueChangeEvent"
          }
        }
      },
      "ManagedPolicyExpressionAttributeValueChangeEventPayload": {
        "type": "object",
        "description": "ManagedPolicyExpressionAttributeValueChangeEventPayload generic structure",
        "properties": {
          "managedPolicyExpression": {
            "$ref": "#/components/schemas/ManagedPolicyExpression"
          }
        }
      },
      "ManagedPolicyExpressionCreateEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyExpressionCreateEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyExpressionCreateEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyExpressionCreateEvent": "#/components/schemas/ManagedPolicyExpressionCreateEvent"
          }
        }
      },
      "ManagedPolicyExpressionCreateEventPayload": {
        "type": "object",
        "description": "ManagedPolicyExpressionCreateEventPayload generic structure",
        "properties": {
          "managedPolicyExpression": {
            "$ref": "#/components/schemas/ManagedPolicyExpression"
          }
        }
      },
      "ManagedPolicyExpressionDeleteEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyExpressionDeleteEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyExpressionDeleteEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyExpressionDeleteEvent": "#/components/schemas/ManagedPolicyExpressionDeleteEvent"
          }
        }
      },
      "ManagedPolicyExpressionDeleteEventPayload": {
        "type": "object",
        "description": "ManagedPolicyExpressionDeleteEventPayload generic structure",
        "properties": {
          "managedPolicyExpression": {
            "$ref": "#/components/schemas/ManagedPolicyExpression"
          }
        }
      },
      "ManagedPolicyExpressionStateChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyExpressionStateChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyExpressionStateChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyExpressionStateChangeEvent": "#/components/schemas/ManagedPolicyExpressionStateChangeEvent"
          }
        }
      },
      "ManagedPolicyExpressionStateChangeEventPayload": {
        "type": "object",
        "description": "ManagedPolicyExpressionStateChangeEventPayload generic structure",
        "properties": {
          "managedPolicyExpression": {
            "$ref": "#/components/schemas/ManagedPolicyExpression"
          }
        }
      },
      "ManagedPolicyExpression_FVO": {
        "description": "Managed PolicyExpression",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicyExpression_FVO_FVO_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyExpression": "#/components/schemas/ManagedPolicyExpression_FVO"
          }
        }
      },
      "ManagedPolicyExpression_MVO": {
        "description": "Managed PolicyExpression",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicyExpression_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyExpression": "#/components/schemas/ManagedPolicyExpression_MVO"
          }
        }
      },
      "ManagedPolicyOperator": {
        "description": "Managed PolicyOperator",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity"
          },
          {
            "$ref": "#/components/schemas/PolicyOperator"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator"
          }
        }
      },
      "ManagedPolicyOperatorAttributeValueChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyOperatorAttributeValueChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyOperatorAttributeValueChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyOperatorAttributeValueChangeEvent": "#/components/schemas/ManagedPolicyOperatorAttributeValueChangeEvent"
          }
        }
      },
      "ManagedPolicyOperatorAttributeValueChangeEventPayload": {
        "type": "object",
        "description": "ManagedPolicyOperatorAttributeValueChangeEventPayload generic structure",
        "properties": {
          "managedPolicyOperator": {
            "$ref": "#/components/schemas/ManagedPolicyOperator"
          }
        }
      },
      "ManagedPolicyOperatorCreateEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyOperatorCreateEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyOperatorCreateEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyOperatorCreateEvent": "#/components/schemas/ManagedPolicyOperatorCreateEvent"
          }
        }
      },
      "ManagedPolicyOperatorCreateEventPayload": {
        "type": "object",
        "description": "ManagedPolicyOperatorCreateEventPayload generic structure",
        "properties": {
          "managedPolicyOperator": {
            "$ref": "#/components/schemas/ManagedPolicyOperator"
          }
        }
      },
      "ManagedPolicyOperatorDeleteEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyOperatorDeleteEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyOperatorDeleteEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyOperatorDeleteEvent": "#/components/schemas/ManagedPolicyOperatorDeleteEvent"
          }
        }
      },
      "ManagedPolicyOperatorDeleteEventPayload": {
        "type": "object",
        "description": "ManagedPolicyOperatorDeleteEventPayload generic structure",
        "properties": {
          "managedPolicyOperator": {
            "$ref": "#/components/schemas/ManagedPolicyOperator"
          }
        }
      },
      "ManagedPolicyOperatorStateChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyOperatorStateChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyOperatorStateChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyOperatorStateChangeEvent": "#/components/schemas/ManagedPolicyOperatorStateChangeEvent"
          }
        }
      },
      "ManagedPolicyOperatorStateChangeEventPayload": {
        "type": "object",
        "description": "ManagedPolicyOperatorStateChangeEventPayload generic structure",
        "properties": {
          "managedPolicyOperator": {
            "$ref": "#/components/schemas/ManagedPolicyOperator"
          }
        }
      },
      "ManagedPolicyOperator_FVO": {
        "description": "Managed PolicyOperator",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicyOperator_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator_FVO"
          }
        }
      },
      "ManagedPolicyOperator_MVO": {
        "description": "Managed PolicyOperator",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicyOperator_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator_MVO"
          }
        }
      },
      "ManagedPolicyStateChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyStateChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyStateChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyStateChangeEvent": "#/components/schemas/ManagedPolicyStateChangeEvent"
          }
        }
      },
      "ManagedPolicyStateChangeEventPayload": {
        "type": "object",
        "description": "ManagedPolicyStateChangeEventPayload generic structure",
        "properties": {
          "managedPolicy": {
            "$ref": "#/components/schemas/ManagedPolicy"
          }
        }
      },
      "ManagedPolicyVariable": {
        "description": "Managed PolicyVariable",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity"
          },
          {
            "$ref": "#/components/schemas/PolicyVariable"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable"
          }
        }
      },
      "ManagedPolicyVariableAttributeValueChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyVariableAttributeValueChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyVariableAttributeValueChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyVariableAttributeValueChangeEvent": "#/components/schemas/ManagedPolicyVariableAttributeValueChangeEvent"
          }
        }
      },
      "ManagedPolicyVariableAttributeValueChangeEventPayload": {
        "type": "object",
        "description": "ManagedPolicyVariableAttributeValueChangeEventPayload generic structure",
        "properties": {
          "managedPolicyVariable": {
            "$ref": "#/components/schemas/ManagedPolicyVariable"
          }
        }
      },
      "ManagedPolicyVariableCreateEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyVariableCreateEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyVariableCreateEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyVariableCreateEvent": "#/components/schemas/ManagedPolicyVariableCreateEvent"
          }
        }
      },
      "ManagedPolicyVariableCreateEventPayload": {
        "type": "object",
        "description": "ManagedPolicyVariableCreateEventPayload generic structure",
        "properties": {
          "managedPolicyVariable": {
            "$ref": "#/components/schemas/ManagedPolicyVariable"
          }
        }
      },
      "ManagedPolicyVariableDeleteEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyVariableDeleteEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyVariableDeleteEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyVariableDeleteEvent": "#/components/schemas/ManagedPolicyVariableDeleteEvent"
          }
        }
      },
      "ManagedPolicyVariableDeleteEventPayload": {
        "type": "object",
        "description": "ManagedPolicyVariableDeleteEventPayload generic structure",
        "properties": {
          "managedPolicyVariable": {
            "$ref": "#/components/schemas/ManagedPolicyVariable"
          }
        }
      },
      "ManagedPolicyVariableStateChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "ManagedPolicyVariableStateChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/ManagedPolicyVariableStateChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyVariableStateChangeEvent": "#/components/schemas/ManagedPolicyVariableStateChangeEvent"
          }
        }
      },
      "ManagedPolicyVariableStateChangeEventPayload": {
        "type": "object",
        "description": "ManagedPolicyVariableStateChangeEventPayload generic structure",
        "properties": {
          "managedPolicyVariable": {
            "$ref": "#/components/schemas/ManagedPolicyVariable"
          }
        }
      },
      "ManagedPolicyVariable_FVO": {
        "description": "Managed PolicyVariable",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicyVariable_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable_FVO"
          }
        }
      },
      "ManagedPolicyVariable_MVO": {
        "description": "Managed PolicyVariable",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicyVariable_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable_MVO"
          }
        }
      },
      "ManagedPolicy_FVO": {
        "description": "Managed Policy",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO"
          },
          {
            "$ref": "#/components/schemas/Policy_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicy": "#/components/schemas/ManagedPolicy_FVO"
          }
        }
      },
      "ManagedPolicy_MVO": {
        "description": "Managed Policy",
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity_MVO"
          },
          {
            "$ref": "#/components/schemas/Policy_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "ManagedPolicy": "#/components/schemas/ManagedPolicy_MVO"
          }
        }
      },
      "Note": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Extra information about a given entity",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier of the note within its containing entity",
                "example": [
                  "afa9-3d90aaa8da0f"
                ]
              },
              "author": {
                "type": "string",
                "description": "Author of the note",
                "example": [
                  "Mr. N. Bene"
                ]
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "description": "Date of the note",
                "example": [
                  "2020-11-20T08:00:00Z"
                ]
              },
              "text": {
                "type": "string",
                "description": "Text of the note",
                "example": [
                  "This is important"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Note": "#/components/schemas/Note"
          }
        }
      },
      "Note_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "description": "Extra information about a given entity",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier of the note within its containing entity",
                "example": [
                  "afa9-3d90aaa8da0f"
                ]
              },
              "author": {
                "type": "string",
                "description": "Author of the note",
                "example": [
                  "Mr. N. Bene"
                ]
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "description": "Date of the note",
                "example": [
                  "2020-11-20T08:00:00Z"
                ]
              },
              "text": {
                "type": "string",
                "description": "Text of the note",
                "example": [
                  "This is important"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Note": "#/components/schemas/Note_FVO"
          }
        }
      },
      "Note_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "Extra information about a given entity",
            "properties": {
              "id": {
                "type": "string",
                "description": "Identifier of the note within its containing entity",
                "example": [
                  "afa9-3d90aaa8da0f"
                ]
              },
              "author": {
                "type": "string",
                "description": "Author of the note",
                "example": [
                  "Mr. N. Bene"
                ]
              },
              "date": {
                "type": "string",
                "format": "date-time",
                "description": "Date of the note",
                "example": [
                  "2020-11-20T08:00:00Z"
                ]
              },
              "text": {
                "type": "string",
                "description": "Text of the note",
                "example": [
                  "This is important"
                ]
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Note": "#/components/schemas/Note_MVO"
          }
        }
      },
      "Policy": {
        "type": "object",
        "description": "Policy is a set of rules that are used to manage and control the state and state transitions of one or more managed objects.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyRule"
          },
          {
            "$ref": "#/components/schemas/PolicySet"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyRule": "#/components/schemas/PolicyRule",
            "PolicySet": "#/components/schemas/PolicySet"
          }
        }
      },
      "PolicyAction": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyActionAtomic"
          },
          {
            "$ref": "#/components/schemas/PolicyActionComposite"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyActionAtomic": "#/components/schemas/PolicyActionAtomic",
            "PolicyActionComposite": "#/components/schemas/PolicyActionComposite"
          }
        }
      },
      "PolicyActionAtomic": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyActionBase"
          },
          {
            "description": "",
            "properties": {
              "@type": {
                "type": "string"
              },
              "action": {
                "$ref": "#/components/schemas/PolicyStatement"
              }
            }
          }
        ]
      },
      "PolicyActionAtomic_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyActionBase_FVO"
          },
          {
            "description": "",
            "properties": {
              "@type": {
                "type": "string"
              },
              "action": {
                "$ref": "#/components/schemas/PolicyStatement_FVO"
              }
            },
            "required": [
              "action",
              "@type"
            ]
          },
          {
            "description": "",
            "properties": {
              "@type": {
                "type": "string"
              },
              "action": {
                "$ref": "#/components/schemas/PolicyStatement_FVO"
              }
            },
            "required": [
              "action",
              "@type"
            ]
          }
        ]
      },
      "PolicyActionAtomic_FVO_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyActionBase_FVO"
          },
          {
            "description": "",
            "properties": {
              "@type": {
                "type": "string"
              },
              "action": {
                "$ref": "#/components/schemas/PolicyStatement_FVO"
              }
            },
            "required": [
              "action",
              "@type"
            ]
          },
          {
            "description": "",
            "properties": {
              "@type": {
                "type": "string"
              },
              "action": {
                "$ref": "#/components/schemas/PolicyStatement_FVO"
              }
            },
            "required": [
              "action",
              "@type"
            ]
          }
        ]
      },
      "PolicyActionAtomic_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyActionBase_MVO"
          },
          {
            "description": "",
            "properties": {
              "@type": {
                "type": "string"
              },
              "action": {
                "$ref": "#/components/schemas/PolicyStatement_MVO"
              }
            }
          }
        ]
      },
      "PolicyActionBase": {
        "description": "A superclass (set of shared properties) inherited by PolicyActionAtomic and PolicyActionComposite.",
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/PolicyConstraintRefOrValue"
          },
          "executedAt": {
            "type": "array",
            "description": "Defines when will this action be triggered, before Policy calculation, or after what calculated PolicyEffect",
            "items": {
              "type": "string",
              "enum": [
                "beforeAll",
                "beforePolicy",
                "onPermit",
                "onDeny",
                "onIndeterminate",
                "onResolved",
                "always",
                "afterAll"
              ]
            }
          }
        }
      },
      "PolicyActionBase_FVO": {
        "description": "A superclass (set of shared properties) inherited by PolicyActionAtomic and PolicyActionComposite.",
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/PolicyConstraintRefOrValue_FVO"
          },
          "executedAt": {
            "type": "array",
            "description": "Defines when will this action be triggered, before Policy calculation, or after what calculated PolicyEffect",
            "items": {
              "type": "string",
              "enum": [
                "beforeAll",
                "beforePolicy",
                "onPermit",
                "onDeny",
                "onIndeterminate",
                "onResolved",
                "always",
                "afterAll"
              ]
            }
          }
        }
      },
      "PolicyActionBase_MVO": {
        "description": "A superclass (set of shared properties) inherited by PolicyActionAtomic and PolicyActionComposite.",
        "properties": {
          "constraint": {
            "$ref": "#/components/schemas/PolicyConstraintRefOrValue_MVO"
          },
          "executedAt": {
            "type": "array",
            "description": "Defines when will this action be triggered, before Policy calculation, or after what calculated PolicyEffect",
            "items": {
              "type": "string",
              "enum": [
                "beforeAll",
                "beforePolicy",
                "onPermit",
                "onDeny",
                "onIndeterminate",
                "onResolved",
                "always",
                "afterAll"
              ]
            }
          }
        }
      },
      "PolicyActionComposite": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyActionBase"
          },
          {
            "description": "",
            "properties": {
              "@type": {
                "type": "string"
              },
              "action": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyActionRelationship"
                },
                "minItems": 1
              }
            }
          }
        ]
      },
      "PolicyActionComposite_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyActionBase_FVO"
          },
          {
            "description": "",
            "properties": {
              "@type": {
                "type": "string"
              },
              "action": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyActionRelationship_FVO_FVO"
                },
                "minItems": 1
              }
            },
            "required": [
              "action",
              "@type"
            ]
          },
          {
            "description": "",
            "properties": {
              "@type": {
                "type": "string"
              },
              "action": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyActionRelationship_FVO_FVO"
                },
                "minItems": 1
              }
            },
            "required": [
              "action",
              "@type"
            ]
          }
        ]
      },
      "PolicyActionComposite_FVO_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyActionBase_FVO"
          },
          {
            "description": "",
            "properties": {
              "@type": {
                "type": "string"
              },
              "action": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyActionRelationship_FVO_FVO"
                },
                "minItems": 1
              }
            },
            "required": [
              "action",
              "@type"
            ]
          },
          {
            "description": "",
            "properties": {
              "@type": {
                "type": "string"
              },
              "action": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyActionRelationship_FVO_FVO"
                },
                "minItems": 1
              }
            },
            "required": [
              "action",
              "@type"
            ]
          }
        ]
      },
      "PolicyActionComposite_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyActionBase_MVO"
          },
          {
            "description": "",
            "properties": {
              "@type": {
                "type": "string"
              },
              "action": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PolicyActionRelationship_MVO"
                },
                "minItems": 1
              }
            }
          }
        ]
      },
      "PolicyActionRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "type": "object",
            "description": "Reference to PolicyAction object",
            "properties": {
              "@type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyActionRefOrValue": {
        "type": "object",
        "description": "Container for PolicyAction Reference or unmanaged PolicyAction object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyActionRef"
          },
          {
            "$ref": "#/components/schemas/PolicyAction"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyActionRef": "#/components/schemas/PolicyActionRef",
            "PolicyAction": "#/components/schemas/PolicyAction",
            "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction"
          }
        }
      },
      "PolicyActionRefOrValue_FVO": {
        "type": "object",
        "description": "Container for PolicyAction Reference or unmanaged PolicyAction object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyActionRef_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicyAction_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyActionRef": "#/components/schemas/PolicyActionRef_FVO",
            "PolicyAction": "#/components/schemas/PolicyAction_FVO",
            "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction_FVO"
          }
        }
      },
      "PolicyActionRefOrValue_MVO": {
        "type": "object",
        "description": "Container for PolicyAction Reference or unmanaged PolicyAction object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyActionRef_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicyAction_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyActionRef": "#/components/schemas/PolicyActionRef_MVO",
            "PolicyAction": "#/components/schemas/PolicyAction_MVO",
            "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction_MVO"
          }
        }
      },
      "PolicyActionRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference_FVO_FVO_FVO_FVO_FVO"
          },
          {
            "type": "object",
            "description": "Reference to PolicyAction object",
            "properties": {
              "@type": {
                "type": "string"
              }
            },
            "required": [
              "@type"
            ]
          },
          {
            "type": "object",
            "description": "Reference to PolicyAction object",
            "properties": {
              "@type": {
                "type": "string"
              }
            },
            "required": [
              "@type"
            ]
          }
        ]
      },
      "PolicyActionRef_FVO_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference_FVO_FVO_FVO_FVO_FVO"
          },
          {
            "type": "object",
            "description": "Reference to PolicyAction object",
            "properties": {
              "@type": {
                "type": "string"
              }
            },
            "required": [
              "@type"
            ]
          },
          {
            "type": "object",
            "description": "Reference to PolicyAction object",
            "properties": {
              "@type": {
                "type": "string"
              }
            },
            "required": [
              "@type"
            ]
          }
        ]
      },
      "PolicyActionRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference_MVO"
          },
          {
            "type": "object",
            "description": "Reference to PolicyAction object",
            "properties": {
              "@type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyActionRelationship": {
        "type": "object",
        "description": "Contains details of a PolicyActionRelationship",
        "properties": {
          "priority": {
            "type": "integer",
            "description": "Sequence value when PolicyEvent has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy.",
            "default": 0
          },
          "constraint": {
            "$ref": "#/components/schemas/PolicyConstraintRefOrValue"
          },
          "policyActionRefOrValue": {
            "$ref": "#/components/schemas/PolicyActionRefOrValue"
          }
        }
      },
      "PolicyActionRelationship_FVO": {
        "type": "object",
        "description": "Contains details of a PolicyActionRelationship",
        "properties": {
          "priority": {
            "type": "integer",
            "description": "Sequence value when PolicyEvent has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy.",
            "default": 0
          },
          "constraint": {
            "$ref": "#/components/schemas/PolicyConstraintRefOrValue_FVO"
          },
          "policyActionRefOrValue": {
            "$ref": "#/components/schemas/PolicyActionRefOrValue_FVO"
          }
        },
        "required": [
          "policyActionRefOrValue"
        ]
      },
      "PolicyActionRelationship_FVO_FVO": {
        "type": "object",
        "description": "Contains details of a PolicyActionRelationship",
        "properties": {
          "priority": {
            "type": "integer",
            "description": "Sequence value when PolicyEvent has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy.",
            "default": 0
          },
          "constraint": {
            "$ref": "#/components/schemas/PolicyConstraintRefOrValue_FVO"
          },
          "policyActionRefOrValue": {
            "$ref": "#/components/schemas/PolicyActionRefOrValue_FVO"
          }
        },
        "required": [
          "policyActionRefOrValue"
        ]
      },
      "PolicyActionRelationship_MVO": {
        "type": "object",
        "description": "Contains details of a PolicyActionRelationship",
        "properties": {
          "priority": {
            "type": "integer",
            "description": "Sequence value when PolicyEvent has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy.",
            "default": 0
          },
          "constraint": {
            "$ref": "#/components/schemas/PolicyConstraintRefOrValue_MVO"
          },
          "policyActionRefOrValue": {
            "$ref": "#/components/schemas/PolicyActionRefOrValue_MVO"
          }
        }
      },
      "PolicyAction_FVO": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyActionAtomic_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicyActionComposite_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyActionAtomic": "#/components/schemas/PolicyActionAtomic_FVO",
            "PolicyActionComposite": "#/components/schemas/PolicyActionComposite_FVO"
          }
        }
      },
      "PolicyAction_MVO": {
        "type": "object",
        "description": "",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyActionAtomic_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicyActionComposite_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyActionAtomic": "#/components/schemas/PolicyActionAtomic_MVO",
            "PolicyActionComposite": "#/components/schemas/PolicyActionComposite_MVO"
          }
        }
      },
      "PolicyBase": {
        "description": "A superclass (set of shared properties) inherited by PolicyRule and PolicySet.",
        "properties": {
          "actionExecutionStrategy": {
            "type": "string",
            "description": "executionStrategy attribute defines the strategy to be used when executing the sequenced actions aggregated by this Policy",
            "enum": [
              "DoUntilSuccess",
              "DoAll",
              "DoUntilFailure",
              "DoAllWithoutFailureOrDoNothing"
            ],
            "default": "DoAll"
          },
          "sequencedActions": {
            "type": "string",
            "description": "Defines how the ordering of the PolicyActions associated with this Policy is to be interpreted.",
            "enum": [
              "Mandatory",
              "Recommended",
              "BestEffort"
            ],
            "default": "Mandatory"
          },
          "priority": {
            "type": "integer",
            "description": "Policy sequence value when Policy has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy. If a Policy is part of a PolicySet, priority on PolicySet overrides this priority",
            "default": 0
          },
          "policyDomainRef": {
            "type": "array",
            "description": "List of all Policy Domains for which this Policy is applicable",
            "items": {
              "$ref": "#/components/schemas/Reference"
            }
          },
          "policyEventRelationship": {
            "type": "array",
            "description": "List of all Policy Events for which this Policy is triggered",
            "items": {
              "$ref": "#/components/schemas/PolicyEventRelationship"
            },
            "minItems": 1
          },
          "policyActionRelationship": {
            "type": "array",
            "description": "List of all Policy Actions which are executed when this Policy is processed",
            "items": {
              "$ref": "#/components/schemas/PolicyActionRelationship"
            },
            "minItems": 1
          }
        }
      },
      "PolicyBase_FVO": {
        "description": "A superclass (set of shared properties) inherited by PolicyRule and PolicySet.",
        "properties": {
          "actionExecutionStrategy": {
            "type": "string",
            "description": "executionStrategy attribute defines the strategy to be used when executing the sequenced actions aggregated by this Policy",
            "enum": [
              "DoUntilSuccess",
              "DoAll",
              "DoUntilFailure",
              "DoAllWithoutFailureOrDoNothing"
            ],
            "default": "DoAll"
          },
          "sequencedActions": {
            "type": "string",
            "description": "Defines how the ordering of the PolicyActions associated with this Policy is to be interpreted.",
            "enum": [
              "Mandatory",
              "Recommended",
              "BestEffort"
            ],
            "default": "Mandatory"
          },
          "priority": {
            "type": "integer",
            "description": "Policy sequence value when Policy has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy. If a Policy is part of a PolicySet, priority on PolicySet overrides this priority",
            "default": 0
          },
          "policyDomainRef": {
            "type": "array",
            "description": "List of all Policy Domains for which this Policy is applicable",
            "items": {
              "$ref": "#/components/schemas/Reference_FVO_FVO"
            }
          },
          "policyEventRelationship": {
            "type": "array",
            "description": "List of all Policy Events for which this Policy is triggered",
            "items": {
              "$ref": "#/components/schemas/PolicyEventRelationship_FVO"
            },
            "minItems": 1
          },
          "policyActionRelationship": {
            "type": "array",
            "description": "List of all Policy Actions which are executed when this Policy is processed",
            "items": {
              "$ref": "#/components/schemas/PolicyActionRelationship_FVO"
            },
            "minItems": 1
          }
        },
        "required": [
          "policyDomainRef",
          "policyEventRelationship"
        ]
      },
      "PolicyBase_FVO_FVO": {
        "description": "A superclass (set of shared properties) inherited by PolicyRule and PolicySet.",
        "properties": {
          "actionExecutionStrategy": {
            "type": "string",
            "description": "executionStrategy attribute defines the strategy to be used when executing the sequenced actions aggregated by this Policy",
            "enum": [
              "DoUntilSuccess",
              "DoAll",
              "DoUntilFailure",
              "DoAllWithoutFailureOrDoNothing"
            ],
            "default": "DoAll"
          },
          "sequencedActions": {
            "type": "string",
            "description": "Defines how the ordering of the PolicyActions associated with this Policy is to be interpreted.",
            "enum": [
              "Mandatory",
              "Recommended",
              "BestEffort"
            ],
            "default": "Mandatory"
          },
          "priority": {
            "type": "integer",
            "description": "Policy sequence value when Policy has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy. If a Policy is part of a PolicySet, priority on PolicySet overrides this priority",
            "default": 0
          },
          "policyDomainRef": {
            "type": "array",
            "description": "List of all Policy Domains for which this Policy is applicable",
            "items": {
              "$ref": "#/components/schemas/Reference_FVO_FVO"
            }
          },
          "policyEventRelationship": {
            "type": "array",
            "description": "List of all Policy Events for which this Policy is triggered",
            "items": {
              "$ref": "#/components/schemas/PolicyEventRelationship_FVO"
            },
            "minItems": 1
          },
          "policyActionRelationship": {
            "type": "array",
            "description": "List of all Policy Actions which are executed when this Policy is processed",
            "items": {
              "$ref": "#/components/schemas/PolicyActionRelationship_FVO"
            },
            "minItems": 1
          }
        },
        "required": [
          "policyDomainRef",
          "policyEventRelationship"
        ]
      },
      "PolicyBase_MVO": {
        "description": "A superclass (set of shared properties) inherited by PolicyRule and PolicySet.",
        "properties": {
          "actionExecutionStrategy": {
            "type": "string",
            "description": "executionStrategy attribute defines the strategy to be used when executing the sequenced actions aggregated by this Policy",
            "enum": [
              "DoUntilSuccess",
              "DoAll",
              "DoUntilFailure",
              "DoAllWithoutFailureOrDoNothing"
            ],
            "default": "DoAll"
          },
          "sequencedActions": {
            "type": "string",
            "description": "Defines how the ordering of the PolicyActions associated with this Policy is to be interpreted.",
            "enum": [
              "Mandatory",
              "Recommended",
              "BestEffort"
            ],
            "default": "Mandatory"
          },
          "priority": {
            "type": "integer",
            "description": "Policy sequence value when Policy has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy. If a Policy is part of a PolicySet, priority on PolicySet overrides this priority",
            "default": 0
          },
          "policyDomainRef": {
            "type": "array",
            "description": "List of all Policy Domains for which this Policy is applicable",
            "items": {
              "$ref": "#/components/schemas/Reference_MVO"
            }
          },
          "policyEventRelationship": {
            "type": "array",
            "description": "List of all Policy Events for which this Policy is triggered",
            "items": {
              "$ref": "#/components/schemas/PolicyEventRelationship_MVO"
            },
            "minItems": 1
          },
          "policyActionRelationship": {
            "type": "array",
            "description": "List of all Policy Actions which are executed when this Policy is processed",
            "items": {
              "$ref": "#/components/schemas/PolicyActionRelationship_MVO"
            },
            "minItems": 1
          }
        }
      },
      "PolicyCatalog": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity"
          },
          {
            "description": "A logical container of all Policy entites. Used to extract Policy details and provide it to the Policy Execution engine",
            "properties": {
              "policyDomainFilter": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Reference"
                }
              },
              "policy": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicy"
                }
              },
              "policyEvent": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyEvent"
                }
              },
              "policyCondition": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyCondition"
                }
              },
              "policyExpression": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyExpression"
                }
              },
              "policyOperator": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyOperator"
                }
              },
              "policyVariable": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyVariable"
                }
              },
              "policyAction": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyAction"
                }
              },
              "policyConstraint": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyConstraint"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyCatalog": "#/components/schemas/PolicyCatalog"
          }
        }
      },
      "PolicyCatalogAttributeValueChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "PolicyCatalogAttributeValueChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/PolicyCatalogAttributeValueChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyCatalogAttributeValueChangeEvent": "#/components/schemas/PolicyCatalogAttributeValueChangeEvent"
          }
        }
      },
      "PolicyCatalogAttributeValueChangeEventPayload": {
        "type": "object",
        "description": "PolicyCatalogAttributeValueChangeEventPayload generic structure",
        "properties": {
          "policyCatalog": {
            "$ref": "#/components/schemas/PolicyCatalog"
          }
        }
      },
      "PolicyCatalogCreateEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "PolicyCatalogCreateEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/PolicyCatalogCreateEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyCatalogCreateEvent": "#/components/schemas/PolicyCatalogCreateEvent"
          }
        }
      },
      "PolicyCatalogCreateEventPayload": {
        "type": "object",
        "description": "PolicyCatalogCreateEventPayload generic structure",
        "properties": {
          "policyCatalog": {
            "$ref": "#/components/schemas/PolicyCatalog"
          }
        }
      },
      "PolicyCatalogDeleteEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "PolicyCatalogDeleteEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/PolicyCatalogDeleteEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyCatalogDeleteEvent": "#/components/schemas/PolicyCatalogDeleteEvent"
          }
        }
      },
      "PolicyCatalogDeleteEventPayload": {
        "type": "object",
        "description": "PolicyCatalogDeleteEventPayload generic structure",
        "properties": {
          "policyCatalog": {
            "$ref": "#/components/schemas/PolicyCatalog"
          }
        }
      },
      "PolicyCatalogStateChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "PolicyCatalogStateChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/PolicyCatalogStateChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyCatalogStateChangeEvent": "#/components/schemas/PolicyCatalogStateChangeEvent"
          }
        }
      },
      "PolicyCatalogStateChangeEventPayload": {
        "type": "object",
        "description": "PolicyCatalogStateChangeEventPayload generic structure",
        "properties": {
          "policyCatalog": {
            "$ref": "#/components/schemas/PolicyCatalog"
          }
        }
      },
      "PolicyCatalog_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO"
          },
          {
            "description": "A logical container of all Policy entites. Used to extract Policy details and provide it to the Policy Execution engine",
            "properties": {
              "policyDomainFilter": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Reference_FVO_FVO_FVO_FVO_FVO"
                }
              },
              "policy": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicy_FVO"
                }
              },
              "policyEvent": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyEvent_FVO"
                }
              },
              "policyCondition": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyCondition_FVO"
                }
              },
              "policyExpression": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyExpression_FVO"
                }
              },
              "policyOperator": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyOperator_FVO"
                }
              },
              "policyVariable": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyVariable_FVO"
                }
              },
              "policyAction": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyAction_FVO"
                }
              },
              "policyConstraint": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyConstraint_FVO"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyCatalog": "#/components/schemas/PolicyCatalog_FVO"
          }
        }
      },
      "PolicyCatalog_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity_MVO"
          },
          {
            "description": "A logical container of all Policy entites. Used to extract Policy details and provide it to the Policy Execution engine",
            "properties": {
              "policyDomainFilter": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Reference_MVO"
                }
              },
              "policy": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicy_MVO"
                }
              },
              "policyEvent": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyEvent_MVO"
                }
              },
              "policyCondition": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyCondition_MVO"
                }
              },
              "policyExpression": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyExpression_MVO"
                }
              },
              "policyOperator": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyOperator_MVO"
                }
              },
              "policyVariable": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyVariable_MVO"
                }
              },
              "policyAction": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyAction_MVO"
                }
              },
              "policyConstraint": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ManagedPolicyConstraint_MVO"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyCatalog": "#/components/schemas/PolicyCatalog_MVO"
          }
        }
      },
      "PolicyCondition": {
        "type": "object",
        "description": "A PolicyCondition clause is an aggregation of individual PolicyConditions, and is treated as an atomic object that is aggregated by a PolicyRule. It is represented as a Boolean expression, and defines the necessary state and/or prerequisites that define whether the actions aggregated by that same PolicyRule should be performed. If PolicyCondition is successfully resolved then it must hold value TRUE or FALSE. Non successfull resolution does not contain any boolean value",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyConditionAtomic"
          },
          {
            "$ref": "#/components/schemas/PolicyConditionComposite"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyConditionAtomic": "#/components/schemas/PolicyConditionAtomic",
            "PolicyConditionComposite": "#/components/schemas/PolicyConditionComposite"
          }
        }
      },
      "PolicyConditionAtomic": {
        "type": "object",
        "description": "PolicyCondition that executes only one statement",
        "properties": {
          "@type": {
            "type": "string"
          },
          "isResultNegated": {
            "type": "boolean",
            "default": "false"
          },
          "statement": {
            "$ref": "#/components/schemas/PolicyStatement"
          }
        }
      },
      "PolicyConditionAtomic_FVO": {
        "type": "object",
        "description": "PolicyCondition that executes only one statement",
        "properties": {
          "@type": {
            "type": "string"
          },
          "isResultNegated": {
            "type": "boolean",
            "default": "false"
          },
          "statement": {
            "$ref": "#/components/schemas/PolicyStatement_FVO"
          }
        },
        "required": [
          "@type",
          "statement"
        ]
      },
      "PolicyConditionAtomic_FVO_FVO": {
        "type": "object",
        "description": "PolicyCondition that executes only one statement",
        "properties": {
          "@type": {
            "type": "string"
          },
          "isResultNegated": {
            "type": "boolean",
            "default": "false"
          },
          "statement": {
            "$ref": "#/components/schemas/PolicyStatement_FVO"
          }
        },
        "required": [
          "@type",
          "statement"
        ]
      },
      "PolicyConditionAtomic_MVO": {
        "type": "object",
        "description": "PolicyCondition that executes only one statement",
        "properties": {
          "@type": {
            "type": "string"
          },
          "isResultNegated": {
            "type": "boolean",
            "default": "false"
          },
          "statement": {
            "$ref": "#/components/schemas/PolicyStatement_MVO"
          }
        }
      },
      "PolicyConditionComposite": {
        "type": "object",
        "description": "PolicyCondition that executes one or many PolicyConditions, applying condition combination logic",
        "properties": {
          "@type": {
            "type": "string"
          },
          "condition": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyConditionRefOrValue"
            },
            "minItems": 1
          },
          "conditionCombinationLogic": {
            "type": "string",
            "description": "Following combination logic is applied: \n * anyOf - if ANY condition resolves to TRUE, end result is TRUE \n * allOf - if ALL conditions resolves to TRUE, end result is TRUE \n * oneOf - if exactly ONE condition resolves to TRUE, end result is TRUE \n * none - if NONE condition resolves to TRUE, end result is TRUE",
            "enum": [
              "anyOf",
              "allOf",
              "oneOf",
              "none"
            ]
          },
          "isResultNegated": {
            "type": "boolean",
            "default": "false"
          }
        }
      },
      "PolicyConditionComposite_FVO": {
        "type": "object",
        "description": "PolicyCondition that executes one or many PolicyConditions, applying condition combination logic",
        "properties": {
          "@type": {
            "type": "string"
          },
          "condition": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyConditionRefOrValue_FVO"
            },
            "minItems": 1
          },
          "conditionCombinationLogic": {
            "type": "string",
            "description": "Following combination logic is applied: \n * anyOf - if ANY condition resolves to TRUE, end result is TRUE \n * allOf - if ALL conditions resolves to TRUE, end result is TRUE \n * oneOf - if exactly ONE condition resolves to TRUE, end result is TRUE \n * none - if NONE condition resolves to TRUE, end result is TRUE",
            "enum": [
              "anyOf",
              "allOf",
              "oneOf",
              "none"
            ]
          },
          "isResultNegated": {
            "type": "boolean",
            "default": "false"
          }
        },
        "required": [
          "@type",
          "condition",
          "conditionCombinationLogic"
        ]
      },
      "PolicyConditionComposite_FVO_FVO": {
        "type": "object",
        "description": "PolicyCondition that executes one or many PolicyConditions, applying condition combination logic",
        "properties": {
          "@type": {
            "type": "string"
          },
          "condition": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyConditionRefOrValue_FVO"
            },
            "minItems": 1
          },
          "conditionCombinationLogic": {
            "type": "string",
            "description": "Following combination logic is applied: \n * anyOf - if ANY condition resolves to TRUE, end result is TRUE \n * allOf - if ALL conditions resolves to TRUE, end result is TRUE \n * oneOf - if exactly ONE condition resolves to TRUE, end result is TRUE \n * none - if NONE condition resolves to TRUE, end result is TRUE",
            "enum": [
              "anyOf",
              "allOf",
              "oneOf",
              "none"
            ]
          },
          "isResultNegated": {
            "type": "boolean",
            "default": "false"
          }
        },
        "required": [
          "@type",
          "condition",
          "conditionCombinationLogic"
        ]
      },
      "PolicyConditionComposite_MVO": {
        "type": "object",
        "description": "PolicyCondition that executes one or many PolicyConditions, applying condition combination logic",
        "properties": {
          "@type": {
            "type": "string"
          },
          "condition": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PolicyConditionRefOrValue_MVO"
            },
            "minItems": 1
          },
          "conditionCombinationLogic": {
            "type": "string",
            "description": "Following combination logic is applied: \n * anyOf - if ANY condition resolves to TRUE, end result is TRUE \n * allOf - if ALL conditions resolves to TRUE, end result is TRUE \n * oneOf - if exactly ONE condition resolves to TRUE, end result is TRUE \n * none - if NONE condition resolves to TRUE, end result is TRUE",
            "enum": [
              "anyOf",
              "allOf",
              "oneOf",
              "none"
            ]
          },
          "isResultNegated": {
            "type": "boolean",
            "default": "false"
          }
        }
      },
      "PolicyConditionRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "type": "object",
            "description": "Reference to managed PolicyCondition object",
            "properties": {
              "@type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyConditionRefOrValue": {
        "type": "object",
        "description": "Container for PolicyCondition Reference or unmanaged PolicyCondition object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyConditionRef"
          },
          {
            "$ref": "#/components/schemas/PolicyCondition"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyConditionRef": "#/components/schemas/PolicyConditionRef",
            "PolicyCondition": "#/components/schemas/PolicyCondition",
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition"
          }
        }
      },
      "PolicyConditionRefOrValue_FVO": {
        "type": "object",
        "description": "Container for PolicyCondition Reference or unmanaged PolicyCondition object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyConditionRef_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicyCondition_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyConditionRef": "#/components/schemas/PolicyConditionRef_FVO",
            "PolicyCondition": "#/components/schemas/PolicyCondition_FVO",
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition_FVO"
          }
        }
      },
      "PolicyConditionRefOrValue_MVO": {
        "type": "object",
        "description": "Container for PolicyCondition Reference or unmanaged PolicyCondition object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyConditionRef_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicyCondition_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyConditionRef": "#/components/schemas/PolicyConditionRef_MVO",
            "PolicyCondition": "#/components/schemas/PolicyCondition_MVO",
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition_MVO"
          }
        }
      },
      "PolicyConditionRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference_FVO_FVO"
          },
          {
            "type": "object",
            "description": "Reference to managed PolicyCondition object",
            "properties": {
              "@type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyConditionRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference_MVO"
          },
          {
            "type": "object",
            "description": "Reference to managed PolicyCondition object",
            "properties": {
              "@type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyCondition_FVO": {
        "type": "object",
        "description": "A PolicyCondition clause is an aggregation of individual PolicyConditions, and is treated as an atomic object that is aggregated by a PolicyRule. It is represented as a Boolean expression, and defines the necessary state and/or prerequisites that define whether the actions aggregated by that same PolicyRule should be performed. If PolicyCondition is successfully resolved then it must hold value TRUE or FALSE. Non successfull resolution does not contain any boolean value",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyConditionAtomic_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicyConditionComposite_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyConditionAtomic": "#/components/schemas/PolicyConditionAtomic_FVO",
            "PolicyConditionComposite": "#/components/schemas/PolicyConditionComposite_FVO"
          }
        }
      },
      "PolicyCondition_MVO": {
        "type": "object",
        "description": "A PolicyCondition clause is an aggregation of individual PolicyConditions, and is treated as an atomic object that is aggregated by a PolicyRule. It is represented as a Boolean expression, and defines the necessary state and/or prerequisites that define whether the actions aggregated by that same PolicyRule should be performed. If PolicyCondition is successfully resolved then it must hold value TRUE or FALSE. Non successfull resolution does not contain any boolean value",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyConditionAtomic_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicyConditionComposite_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyConditionAtomic": "#/components/schemas/PolicyConditionAtomic_MVO",
            "PolicyConditionComposite": "#/components/schemas/PolicyConditionComposite_MVO"
          }
        }
      },
      "PolicyConstraint": {
        "description": "Any kind of condition that needs to be confirmed in order to proceed with next step",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyEventConstraint"
          },
          {
            "$ref": "#/components/schemas/PolicyCondition"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyEventConstraint": "#/components/schemas/PolicyEventConstraint",
            "PolicyCondition": "#/components/schemas/PolicyCondition",
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition"
          }
        }
      },
      "PolicyConstraintRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "type": "object",
            "description": "Reference to managed PolicyConstraint object",
            "properties": {
              "@type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyConstraintRefOrValue": {
        "type": "object",
        "description": "Container for PolicyConstraint Reference or unmanaged PolicyConstraint object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyConstraintRef"
          },
          {
            "$ref": "#/components/schemas/PolicyConstraint"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyConstraintRef": "#/components/schemas/PolicyConstraintRef",
            "PolicyConstraint": "#/components/schemas/PolicyConstraint",
            "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint"
          }
        }
      },
      "PolicyConstraintRefOrValue_FVO": {
        "type": "object",
        "description": "Container for PolicyConstraint Reference or unmanaged PolicyConstraint object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyConstraintRef_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicyConstraint_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyConstraintRef": "#/components/schemas/PolicyConstraintRef_FVO",
            "PolicyConstraint": "#/components/schemas/PolicyConstraint_FVO",
            "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint_FVO"
          }
        }
      },
      "PolicyConstraintRefOrValue_MVO": {
        "type": "object",
        "description": "Container for PolicyConstraint Reference or unmanaged PolicyConstraint object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyConstraintRef_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicyConstraint_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyConstraintRef": "#/components/schemas/PolicyConstraintRef_MVO",
            "PolicyConstraint": "#/components/schemas/PolicyConstraint_MVO",
            "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint_MVO"
          }
        }
      },
      "PolicyConstraintRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference_FVO_FVO"
          },
          {
            "type": "object",
            "description": "Reference to managed PolicyConstraint object",
            "properties": {
              "@type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyConstraintRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference_MVO"
          },
          {
            "type": "object",
            "description": "Reference to managed PolicyConstraint object",
            "properties": {
              "@type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyConstraint_FVO": {
        "description": "Any kind of condition that needs to be confirmed in order to proceed with next step",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyEventConstraint_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicyCondition_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyEventConstraint": "#/components/schemas/PolicyEventConstraint_FVO",
            "PolicyCondition": "#/components/schemas/PolicyCondition_FVO",
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition_FVO"
          }
        }
      },
      "PolicyConstraint_MVO": {
        "description": "Any kind of condition that needs to be confirmed in order to proceed with next step",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyEventConstraint_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicyCondition_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyEventConstraint": "#/components/schemas/PolicyEventConstraint_MVO",
            "PolicyCondition": "#/components/schemas/PolicyCondition_MVO",
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition_MVO"
          }
        }
      },
      "PolicyDomain": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity"
          },
          {
            "description": "",
            "properties": {
              "scopedManagedEntity": {
                "type": "array",
                "description": "List of entities to which this PolicyDomain applies",
                "items": {
                  "$ref": "#/components/schemas/Reference"
                },
                "minItems": 1
              },
              "subDomainRef": {
                "type": "array",
                "description": "List of child PolicyDomains. PolicyDomain can have many child Policy Domains, but one child PolicyDomain can only have one parent PolicyDomain",
                "items": {
                  "$ref": "#/components/schemas/Reference"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyDomain": "#/components/schemas/PolicyDomain"
          }
        }
      },
      "PolicyDomainAttributeValueChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "PolicyDomainAttributeValueChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/PolicyDomainAttributeValueChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyDomainAttributeValueChangeEvent": "#/components/schemas/PolicyDomainAttributeValueChangeEvent"
          }
        }
      },
      "PolicyDomainAttributeValueChangeEventPayload": {
        "type": "object",
        "description": "PolicyDomainAttributeValueChangeEventPayload generic structure",
        "properties": {
          "policyDomain": {
            "$ref": "#/components/schemas/PolicyDomain"
          }
        }
      },
      "PolicyDomainCreateEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "PolicyDomainCreateEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/PolicyDomainCreateEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyDomainCreateEvent": "#/components/schemas/PolicyDomainCreateEvent"
          }
        }
      },
      "PolicyDomainCreateEventPayload": {
        "type": "object",
        "description": "PolicyDomainCreateEventPayload generic structure",
        "properties": {
          "policyDomain": {
            "$ref": "#/components/schemas/PolicyDomain"
          }
        }
      },
      "PolicyDomainDeleteEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "PolicyDomainDeleteEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/PolicyDomainDeleteEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyDomainDeleteEvent": "#/components/schemas/PolicyDomainDeleteEvent"
          }
        }
      },
      "PolicyDomainDeleteEventPayload": {
        "type": "object",
        "description": "PolicyDomainDeleteEventPayload generic structure",
        "properties": {
          "policyDomain": {
            "$ref": "#/components/schemas/PolicyDomain"
          }
        }
      },
      "PolicyDomainStateChangeEvent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Event"
          },
          {
            "type": "object",
            "description": "PolicyDomainStateChangeEvent generic structure",
            "properties": {
              "event": {
                "$ref": "#/components/schemas/PolicyDomainStateChangeEventPayload"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyDomainStateChangeEvent": "#/components/schemas/PolicyDomainStateChangeEvent"
          }
        }
      },
      "PolicyDomainStateChangeEventPayload": {
        "type": "object",
        "description": "PolicyDomainStateChangeEventPayload generic structure",
        "properties": {
          "policyDomain": {
            "$ref": "#/components/schemas/PolicyDomain"
          }
        }
      },
      "PolicyDomain_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO"
          },
          {
            "description": "",
            "properties": {
              "scopedManagedEntity": {
                "type": "array",
                "description": "List of entities to which this PolicyDomain applies",
                "items": {
                  "$ref": "#/components/schemas/Reference_FVO_FVO_FVO_FVO_FVO"
                },
                "minItems": 1
              },
              "subDomainRef": {
                "type": "array",
                "description": "List of child PolicyDomains. PolicyDomain can have many child Policy Domains, but one child PolicyDomain can only have one parent PolicyDomain",
                "items": {
                  "$ref": "#/components/schemas/Reference_FVO_FVO_FVO_FVO_FVO"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyDomain": "#/components/schemas/PolicyDomain_FVO"
          }
        }
      },
      "PolicyDomain_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyManagedEntity_MVO"
          },
          {
            "description": "",
            "properties": {
              "scopedManagedEntity": {
                "type": "array",
                "description": "List of entities to which this PolicyDomain applies",
                "items": {
                  "$ref": "#/components/schemas/Reference_MVO"
                },
                "minItems": 1
              },
              "subDomainRef": {
                "type": "array",
                "description": "List of child PolicyDomains. PolicyDomain can have many child Policy Domains, but one child PolicyDomain can only have one parent PolicyDomain",
                "items": {
                  "$ref": "#/components/schemas/Reference_MVO"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyDomain": "#/components/schemas/PolicyDomain_MVO"
          }
        }
      },
      "PolicyEvent": {
        "type": "object",
        "description": "A PolicyEvent is an occurrence of an important event or multiple events, and can be used to trigger the evaluation of a Policy",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyEventAtomicBase"
          },
          {
            "$ref": "#/components/schemas/PolicyEventComposite"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyEventAtomicBase": "#/components/schemas/PolicyEventAtomicBase",
            "PolicyEventComposite": "#/components/schemas/PolicyEventComposite"
          }
        }
      },
      "PolicyEventAtomicBase": {
        "additionalProperties": true,
        "type": "object",
        "description": "A PolicyEventAtomic is an occurrence of a single atomic event. It must be used as a abstract class overloaded by a particular event in TMF API domain for which Policy is defined"
      },
      "PolicyEventAtomicBase_FVO": {
        "additionalProperties": true,
        "type": "object",
        "description": "A PolicyEventAtomic is an occurrence of a single atomic event. It must be used as a abstract class overloaded by a particular event in TMF API domain for which Policy is defined",
        "required": [
          "@type"
        ]
      },
      "PolicyEventAtomicBase_FVO_FVO": {
        "additionalProperties": true,
        "type": "object",
        "description": "A PolicyEventAtomic is an occurrence of a single atomic event. It must be used as a abstract class overloaded by a particular event in TMF API domain for which Policy is defined",
        "required": [
          "@type"
        ]
      },
      "PolicyEventAtomicBase_MVO": {
        "additionalProperties": true,
        "type": "object",
        "description": "A PolicyEventAtomic is an occurrence of a single atomic event. It must be used as a abstract class overloaded by a particular event in TMF API domain for which Policy is defined"
      },
      "PolicyEventComposite": {
        "type": "object",
        "description": "A PolicyEventComposite is an event made of multiple PolicyEvents.",
        "properties": {
          "@type": {
            "type": "string"
          },
          "policyEventRelationship": {
            "type": "array",
            "description": "Contains set of aggregated PolicyEvents",
            "items": {
              "$ref": "#/components/schemas/PolicyEventRelationship"
            },
            "minItems": 1
          }
        }
      },
      "PolicyEventComposite_FVO": {
        "type": "object",
        "description": "A PolicyEventComposite is an event made of multiple PolicyEvents.",
        "properties": {
          "@type": {
            "type": "string"
          },
          "policyEventRelationship": {
            "type": "array",
            "description": "Contains set of aggregated PolicyEvents",
            "items": {
              "$ref": "#/components/schemas/PolicyEventRelationship_FVO"
            },
            "minItems": 1
          }
        },
        "required": [
          "@type",
          "policyEventRelationship"
        ]
      },
      "PolicyEventComposite_FVO_FVO": {
        "type": "object",
        "description": "A PolicyEventComposite is an event made of multiple PolicyEvents.",
        "properties": {
          "@type": {
            "type": "string"
          },
          "policyEventRelationship": {
            "type": "array",
            "description": "Contains set of aggregated PolicyEvents",
            "items": {
              "$ref": "#/components/schemas/PolicyEventRelationship_FVO"
            },
            "minItems": 1
          }
        },
        "required": [
          "@type",
          "policyEventRelationship"
        ]
      },
      "PolicyEventComposite_MVO": {
        "type": "object",
        "description": "A PolicyEventComposite is an event made of multiple PolicyEvents.",
        "properties": {
          "@type": {
            "type": "string"
          },
          "policyEventRelationship": {
            "type": "array",
            "description": "Contains set of aggregated PolicyEvents",
            "items": {
              "$ref": "#/components/schemas/PolicyEventRelationship_MVO"
            },
            "minItems": 1
          }
        }
      },
      "PolicyEventConstraint": {
        "description": "Constraint based on provided list of PolicyEvent references. If PolicyEvent type is found in the list then constraint is validated truthfully",
        "properties": {
          "@type": {
            "type": "string"
          },
          "policyEventType": {
            "type": "array",
            "description": "List of PolicyEvent types",
            "items": {
              "type": "string"
            },
            "minItems": 1
          }
        }
      },
      "PolicyEventConstraint_FVO": {
        "description": "Constraint based on provided list of PolicyEvent references. If PolicyEvent type is found in the list then constraint is validated truthfully",
        "properties": {
          "@type": {
            "type": "string"
          },
          "policyEventType": {
            "type": "array",
            "description": "List of PolicyEvent types",
            "items": {
              "type": "string"
            },
            "minItems": 1
          }
        },
        "required": [
          "@type",
          "policyEventType"
        ]
      },
      "PolicyEventConstraint_FVO_FVO": {
        "description": "Constraint based on provided list of PolicyEvent references. If PolicyEvent type is found in the list then constraint is validated truthfully",
        "properties": {
          "@type": {
            "type": "string"
          },
          "policyEventType": {
            "type": "array",
            "description": "List of PolicyEvent types",
            "items": {
              "type": "string"
            },
            "minItems": 1
          }
        },
        "required": [
          "@type",
          "policyEventType"
        ]
      },
      "PolicyEventConstraint_MVO": {
        "description": "Constraint based on provided list of PolicyEvent references. If PolicyEvent type is found in the list then constraint is validated truthfully",
        "properties": {
          "@type": {
            "type": "string"
          },
          "policyEventType": {
            "type": "array",
            "description": "List of PolicyEvent types",
            "items": {
              "type": "string"
            },
            "minItems": 1
          }
        }
      },
      "PolicyEventRef": {
        "type": "object",
        "description": "Reference to PolicyEvent object",
        "properties": {
          "@type": {
            "type": "string"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        }
      },
      "PolicyEventRefOrValue": {
        "type": "object",
        "description": "Container for PolicyEvent Reference or PolicyEvent object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyEventRef"
          },
          {
            "$ref": "#/components/schemas/PolicyEvent"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyEventRef": "#/components/schemas/PolicyEventRef",
            "PolicyEvent": "#/components/schemas/PolicyEvent",
            "ManagedPolicyEvent": "#/components/schemas/ManagedPolicyEvent"
          }
        }
      },
      "PolicyEventRefOrValue_FVO": {
        "type": "object",
        "description": "Container for PolicyEvent Reference or PolicyEvent object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyEventRef_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicyEvent_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyEventRef": "#/components/schemas/PolicyEventRef_FVO",
            "PolicyEvent": "#/components/schemas/PolicyEvent_FVO",
            "ManagedPolicyEvent": "#/components/schemas/ManagedPolicyEvent_FVO"
          }
        }
      },
      "PolicyEventRefOrValue_MVO": {
        "type": "object",
        "description": "Container for PolicyEvent Reference or PolicyEvent object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyEventRef_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicyEvent_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyEventRef": "#/components/schemas/PolicyEventRef_MVO",
            "PolicyEvent": "#/components/schemas/PolicyEvent_MVO",
            "ManagedPolicyEvent": "#/components/schemas/ManagedPolicyEvent_MVO"
          }
        }
      },
      "PolicyEventRef_FVO": {
        "type": "object",
        "description": "Reference to PolicyEvent object",
        "properties": {
          "@type": {
            "type": "string"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "required": [
          "@type",
          "@referredType"
        ]
      },
      "PolicyEventRef_FVO_FVO": {
        "type": "object",
        "description": "Reference to PolicyEvent object",
        "properties": {
          "@type": {
            "type": "string"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "required": [
          "@type",
          "@referredType"
        ]
      },
      "PolicyEventRef_MVO": {
        "type": "object",
        "description": "Reference to PolicyEvent object",
        "properties": {
          "@type": {
            "type": "string"
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        }
      },
      "PolicyEventRelationship": {
        "type": "object",
        "description": "Contains details of a PolicyEventRelationship",
        "properties": {
          "priority": {
            "type": "integer",
            "description": "Sequence value when PolicyEvent has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy.",
            "default": 0
          },
          "constraint": {
            "$ref": "#/components/schemas/PolicyConstraintRefOrValue"
          },
          "policyEventRefOrValue": {
            "$ref": "#/components/schemas/PolicyEventRefOrValue"
          }
        }
      },
      "PolicyEventRelationship_FVO": {
        "type": "object",
        "description": "Contains details of a PolicyEventRelationship",
        "properties": {
          "priority": {
            "type": "integer",
            "description": "Sequence value when PolicyEvent has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy.",
            "default": 0
          },
          "constraint": {
            "$ref": "#/components/schemas/PolicyConstraintRefOrValue_FVO"
          },
          "policyEventRefOrValue": {
            "$ref": "#/components/schemas/PolicyEventRefOrValue_FVO"
          }
        },
        "required": [
          "policyEventRefOrValue"
        ]
      },
      "PolicyEventRelationship_FVO_FVO": {
        "type": "object",
        "description": "Contains details of a PolicyEventRelationship",
        "properties": {
          "priority": {
            "type": "integer",
            "description": "Sequence value when PolicyEvent has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy.",
            "default": 0
          },
          "constraint": {
            "$ref": "#/components/schemas/PolicyConstraintRefOrValue_FVO"
          },
          "policyEventRefOrValue": {
            "$ref": "#/components/schemas/PolicyEventRefOrValue_FVO"
          }
        },
        "required": [
          "policyEventRefOrValue"
        ]
      },
      "PolicyEventRelationship_MVO": {
        "type": "object",
        "description": "Contains details of a PolicyEventRelationship",
        "properties": {
          "priority": {
            "type": "integer",
            "description": "Sequence value when PolicyEvent has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy.",
            "default": 0
          },
          "constraint": {
            "$ref": "#/components/schemas/PolicyConstraintRefOrValue_MVO"
          },
          "policyEventRefOrValue": {
            "$ref": "#/components/schemas/PolicyEventRefOrValue_MVO"
          }
        }
      },
      "PolicyEvent_FVO": {
        "type": "object",
        "description": "A PolicyEvent is an occurrence of an important event or multiple events, and can be used to trigger the evaluation of a Policy",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyEventAtomicBase_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicyEventComposite_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyEventAtomicBase": "#/components/schemas/PolicyEventAtomicBase_FVO",
            "PolicyEventComposite": "#/components/schemas/PolicyEventComposite_FVO"
          }
        }
      },
      "PolicyEvent_MVO": {
        "type": "object",
        "description": "A PolicyEvent is an occurrence of an important event or multiple events, and can be used to trigger the evaluation of a Policy",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyEventAtomicBase_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicyEventComposite_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyEventAtomicBase": "#/components/schemas/PolicyEventAtomicBase_MVO",
            "PolicyEventComposite": "#/components/schemas/PolicyEventComposite_MVO"
          }
        }
      },
      "PolicyExpression": {
        "type": "object",
        "description": "PolicyExpression is a constraint based on text expression and parsed by an Expression Language (SpEL, JS, Groovy, FEEL, ...)",
        "properties": {
          "@type": {
            "type": "string"
          },
          "expression": {
            "type": "string",
            "description": "Expression language command"
          },
          "expressionLanguage": {
            "description": "Defines expression language used to build expression",
            "type": "string",
            "example": "JS"
          }
        }
      },
      "PolicyExpressionRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "type": "object",
            "description": "Reference to managed PolicyExpression object",
            "properties": {
              "@type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyExpressionRefOrValue": {
        "type": "object",
        "description": "Container for PolicyExpression Reference or unmanaged PolicyExpression object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyExpressionRef"
          },
          {
            "$ref": "#/components/schemas/PolicyExpression"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyExpressionRef": "#/components/schemas/PolicyExpressionRef",
            "PolicyExpression": "#/components/schemas/PolicyExpression",
            "ManagedPolicyExpression": "#/components/schemas/ManagedPolicyExpression"
          }
        }
      },
      "PolicyExpressionRefOrValue_FVO": {
        "type": "object",
        "description": "Container for PolicyExpression Reference or unmanaged PolicyExpression object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyExpressionRef_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicyExpression_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyExpressionRef": "#/components/schemas/PolicyExpressionRef_FVO",
            "PolicyExpression": "#/components/schemas/PolicyExpression_FVO"
          }
        }
      },
      "PolicyExpressionRefOrValue_MVO": {
        "type": "object",
        "description": "Container for PolicyExpression Reference or unmanaged PolicyExpression object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyExpressionRef_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicyExpression_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyExpressionRef": "#/components/schemas/PolicyExpressionRef_MVO",
            "PolicyExpression": "#/components/schemas/PolicyExpression_MVO",
            "ManagedPolicyExpression": "#/components/schemas/ManagedPolicyExpression_MVO"
          }
        }
      },
      "PolicyExpressionRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference_FVO_FVO"
          },
          {
            "type": "object",
            "description": "Reference to managed PolicyExpression object",
            "properties": {
              "@type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyExpressionRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference_MVO"
          },
          {
            "type": "object",
            "description": "Reference to managed PolicyExpression object",
            "properties": {
              "@type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyExpression_FVO": {
        "type": "object",
        "description": "PolicyExpression is a constraint based on text expression and parsed by an Expression Language (SpEL, JS, Groovy, FEEL, ...)",
        "properties": {
          "@type": {
            "type": "string"
          },
          "expression": {
            "type": "string",
            "description": "Expression language command"
          },
          "expressionLanguage": {
            "description": "Defines expression language used to build expression",
            "type": "string",
            "example": "JS"
          }
        },
        "required": [
          "@type",
          "expression"
        ]
      },
      "PolicyExpression_FVO_FVO": {
        "type": "object",
        "description": "PolicyExpression is a constraint based on text expression and parsed by an Expression Language (SpEL, JS, Groovy, FEEL, ...)",
        "properties": {
          "@type": {
            "type": "string"
          },
          "expression": {
            "type": "string",
            "description": "Expression language command"
          },
          "expressionLanguage": {
            "description": "Defines expression language used to build expression",
            "type": "string",
            "example": "JS"
          }
        },
        "required": [
          "@type",
          "expression"
        ]
      },
      "PolicyExpression_FVO_FVO_FVO": {
        "type": "object",
        "description": "PolicyExpression is a constraint based on text expression and parsed by an Expression Language (SpEL, JS, Groovy, FEEL, ...)",
        "properties": {
          "@type": {
            "type": "string"
          },
          "expression": {
            "type": "string",
            "description": "Expression language command"
          },
          "expressionLanguage": {
            "description": "Defines expression language used to build expression",
            "type": "string",
            "example": "JS"
          }
        },
        "required": [
          "@type",
          "expression"
        ]
      },
      "PolicyExpression_FVO_FVO_FVO_FVO": {
        "type": "object",
        "description": "PolicyExpression is a constraint based on text expression and parsed by an Expression Language (SpEL, JS, Groovy, FEEL, ...)",
        "properties": {
          "@type": {
            "type": "string"
          },
          "expression": {
            "type": "string",
            "description": "Expression language command"
          },
          "expressionLanguage": {
            "description": "Defines expression language used to build expression",
            "type": "string",
            "example": "JS"
          }
        },
        "required": [
          "@type",
          "expression"
        ]
      },
      "PolicyExpression_MVO": {
        "type": "object",
        "description": "PolicyExpression is a constraint based on text expression and parsed by an Expression Language (SpEL, JS, Groovy, FEEL, ...)",
        "properties": {
          "@type": {
            "type": "string"
          },
          "expression": {
            "type": "string",
            "description": "Expression language command"
          },
          "expressionLanguage": {
            "description": "Defines expression language used to build expression",
            "type": "string",
            "example": "JS"
          }
        }
      },
      "PolicyManagedEntity": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyManagedEntity": "#/components/schemas/PolicyManagedEntity",
            "PolicyDomain": "#/components/schemas/PolicyDomain",
            "PolicyCatalog": "#/components/schemas/PolicyCatalog",
            "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable",
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator",
            "ManagedPolicyExpression": "#/components/schemas/ManagedPolicyExpression",
            "ManagedPolicyEvent": "#/components/schemas/ManagedPolicyEvent",
            "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint",
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition",
            "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction",
            "ManagedPolicy": "#/components/schemas/ManagedPolicy"
          }
        }
      },
      "PolicyManagedEntity_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyManagedEntity": "#/components/schemas/PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO",
            "ManagedPolicy": "#/components/schemas/ManagedPolicy_FVO",
            "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable_FVO",
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator_FVO",
            "ManagedPolicyExpression": "#/components/schemas/ManagedPolicyExpression_FVO",
            "ManagedPolicyEvent": "#/components/schemas/ManagedPolicyEvent_FVO",
            "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint_FVO",
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition_FVO",
            "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction_FVO"
          }
        }
      },
      "PolicyManagedEntity_FVO_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyManagedEntity": "#/components/schemas/PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO",
            "ManagedPolicy": "#/components/schemas/ManagedPolicy_FVO",
            "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable_FVO",
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator_FVO",
            "ManagedPolicyExpression": "#/components/schemas/ManagedPolicyExpression_FVO",
            "ManagedPolicyEvent": "#/components/schemas/ManagedPolicyEvent_FVO",
            "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint_FVO",
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition_FVO",
            "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction_FVO"
          }
        }
      },
      "PolicyManagedEntity_FVO_FVO_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyManagedEntity": "#/components/schemas/PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO",
            "ManagedPolicy": "#/components/schemas/ManagedPolicy_FVO",
            "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable_FVO",
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator_FVO",
            "ManagedPolicyExpression": "#/components/schemas/ManagedPolicyExpression_FVO",
            "ManagedPolicyEvent": "#/components/schemas/ManagedPolicyEvent_FVO",
            "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint_FVO",
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition_FVO",
            "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction_FVO"
          }
        }
      },
      "PolicyManagedEntity_FVO_FVO_FVO_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyManagedEntity": "#/components/schemas/PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO",
            "ManagedPolicy": "#/components/schemas/ManagedPolicy_FVO",
            "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable_FVO",
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator_FVO",
            "ManagedPolicyExpression": "#/components/schemas/ManagedPolicyExpression_FVO",
            "ManagedPolicyEvent": "#/components/schemas/ManagedPolicyEvent_FVO",
            "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint_FVO",
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition_FVO",
            "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction_FVO"
          }
        }
      },
      "PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyManagedEntity": "#/components/schemas/PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO",
            "ManagedPolicy": "#/components/schemas/ManagedPolicy_FVO",
            "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable_FVO",
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator_FVO",
            "ManagedPolicyExpression": "#/components/schemas/ManagedPolicyExpression_FVO",
            "ManagedPolicyEvent": "#/components/schemas/ManagedPolicyEvent_FVO",
            "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint_FVO",
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition_FVO",
            "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction_FVO"
          }
        }
      },
      "PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyManagedEntity": "#/components/schemas/PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO",
            "ManagedPolicy": "#/components/schemas/ManagedPolicy_FVO",
            "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable_FVO",
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator_FVO",
            "ManagedPolicyExpression": "#/components/schemas/ManagedPolicyExpression_FVO",
            "ManagedPolicyEvent": "#/components/schemas/ManagedPolicyEvent_FVO",
            "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint_FVO",
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition_FVO",
            "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction_FVO"
          }
        }
      },
      "PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyManagedEntity": "#/components/schemas/PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO",
            "ManagedPolicy": "#/components/schemas/ManagedPolicy_FVO",
            "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable_FVO",
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator_FVO",
            "ManagedPolicyExpression": "#/components/schemas/ManagedPolicyExpression_FVO",
            "ManagedPolicyEvent": "#/components/schemas/ManagedPolicyEvent_FVO",
            "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint_FVO",
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition_FVO",
            "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction_FVO"
          }
        }
      },
      "PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyManagedEntity": "#/components/schemas/PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO",
            "ManagedPolicy": "#/components/schemas/ManagedPolicy_FVO",
            "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable_FVO",
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator_FVO",
            "ManagedPolicyExpression": "#/components/schemas/ManagedPolicyExpression_FVO",
            "ManagedPolicyEvent": "#/components/schemas/ManagedPolicyEvent_FVO",
            "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint_FVO",
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition_FVO",
            "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction_FVO"
          }
        }
      },
      "PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyManagedEntity": "#/components/schemas/PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO",
            "ManagedPolicy": "#/components/schemas/ManagedPolicy_FVO",
            "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable_FVO",
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator_FVO",
            "ManagedPolicyExpression": "#/components/schemas/ManagedPolicyExpression_FVO",
            "ManagedPolicyEvent": "#/components/schemas/ManagedPolicyEvent_FVO",
            "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint_FVO",
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition_FVO",
            "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction_FVO"
          }
        }
      },
      "PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_FVO"
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_FVO"
                }
              }
            },
            "required": [
              "name",
              "version",
              "lifecycleState"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyManagedEntity": "#/components/schemas/PolicyManagedEntity_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO_FVO",
            "ManagedPolicy": "#/components/schemas/ManagedPolicy_FVO",
            "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable_FVO",
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator_FVO",
            "ManagedPolicyExpression": "#/components/schemas/ManagedPolicyExpression_FVO",
            "ManagedPolicyEvent": "#/components/schemas/ManagedPolicyEvent_FVO",
            "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint_FVO",
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition_FVO",
            "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction_FVO"
          }
        }
      },
      "PolicyManagedEntity_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity_MVO"
          },
          {
            "description": "Fields required for managed (reusable) Policy entities",
            "properties": {
              "name": {
                "type": "string",
                "description": "Name of the Policy Entity"
              },
              "version": {
                "type": "string",
                "description": "Version of the Policy Entity"
              },
              "description": {
                "type": "string",
                "description": "Description of the Policy Entity"
              },
              "lifecycleState": {
                "type": "string",
                "description": "Lifecycle state of the Policy Entity",
                "enum": [
                  "inDesign",
                  "designed",
                  "active",
                  "retired",
                  "rejected"
                ]
              },
              "validFor": {
                "$ref": "#/components/schemas/TimePeriod"
              },
              "note": {
                "type": "array",
                "description": "Comments related to Policy Entity",
                "items": {
                  "$ref": "#/components/schemas/Note_MVO"
                }
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyManagedEntity": "#/components/schemas/PolicyManagedEntity_MVO",
            "PolicyDomain": "#/components/schemas/PolicyDomain_MVO",
            "PolicyCatalog": "#/components/schemas/PolicyCatalog_MVO",
            "ManagedPolicy": "#/components/schemas/ManagedPolicy_MVO",
            "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable_MVO",
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator_MVO",
            "ManagedPolicyExpression": "#/components/schemas/ManagedPolicyExpression_MVO",
            "ManagedPolicyEvent": "#/components/schemas/ManagedPolicyEvent_MVO",
            "ManagedPolicyConstraint": "#/components/schemas/ManagedPolicyConstraint_MVO",
            "ManagedPolicyCondition": "#/components/schemas/ManagedPolicyCondition_MVO",
            "ManagedPolicyAction": "#/components/schemas/ManagedPolicyAction_MVO"
          }
        }
      },
      "PolicyOperator": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "A PolicyOperator is a class that defines possible operations with needed operands on a specific variables",
            "properties": {
              "variable": {
                "$ref": "#/components/schemas/PolicyVariableRefOrValue"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyOperator": "#/components/schemas/PolicyOperator",
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator"
          }
        }
      },
      "PolicyOperatorRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "type": "object",
            "description": "Reference to managed PolicyOperator object",
            "properties": {
              "@type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyOperatorRefOrValue": {
        "type": "object",
        "description": "Container for PolicyOperator Reference or unmanaged PolicyOperator object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyOperatorRef"
          },
          {
            "$ref": "#/components/schemas/PolicyOperator"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyOperatorRef": "#/components/schemas/PolicyOperatorRef",
            "PolicyOperator": "#/components/schemas/PolicyOperator",
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator"
          }
        }
      },
      "PolicyOperatorRefOrValue_FVO": {
        "type": "object",
        "description": "Container for PolicyOperator Reference or unmanaged PolicyOperator object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyOperatorRef_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicyOperator_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyOperatorRef": "#/components/schemas/PolicyOperatorRef_FVO",
            "PolicyOperator": "#/components/schemas/PolicyOperator_FVO",
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator_FVO"
          }
        }
      },
      "PolicyOperatorRefOrValue_MVO": {
        "type": "object",
        "description": "Container for PolicyOperator Reference or unmanaged PolicyOperator object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyOperatorRef_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicyOperator_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyOperatorRef": "#/components/schemas/PolicyOperatorRef_MVO",
            "PolicyOperator": "#/components/schemas/PolicyOperator_MVO",
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator_MVO"
          }
        }
      },
      "PolicyOperatorRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference_FVO_FVO"
          },
          {
            "type": "object",
            "description": "Reference to managed PolicyOperator object",
            "properties": {
              "@type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyOperatorRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference_MVO"
          },
          {
            "type": "object",
            "description": "Reference to managed PolicyOperator object",
            "properties": {
              "@type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyOperator_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible_FVO"
          },
          {
            "type": "object",
            "description": "A PolicyOperator is a class that defines possible operations with needed operands on a specific variables",
            "properties": {
              "variable": {
                "$ref": "#/components/schemas/PolicyVariableRefOrValue_FVO"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyOperator": "#/components/schemas/PolicyOperator_FVO",
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator_FVO"
          }
        }
      },
      "PolicyOperator_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "description": "A PolicyOperator is a class that defines possible operations with needed operands on a specific variables",
            "properties": {
              "variable": {
                "$ref": "#/components/schemas/PolicyVariableRefOrValue_MVO"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyOperator": "#/components/schemas/PolicyOperator_MVO",
            "ManagedPolicyOperator": "#/components/schemas/ManagedPolicyOperator_MVO"
          }
        }
      },
      "PolicyRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "type": "object",
            "description": "Reference to managed Policy object",
            "properties": {
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "version": {
                "type": "string"
              },
              "@type": {
                "type": "string",
                "description": "When sub-classing, this defines the sub-class Extensible name"
              },
              "@baseType": {
                "type": "string",
                "description": "When sub-classing, this defines the super-class"
              },
              "@schemaLocation": {
                "type": "string",
                "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
              }
            }
          }
        ]
      },
      "PolicyRefOrValue": {
        "type": "object",
        "description": "Container for Policy Reference or unmanaged Policy object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyRef"
          },
          {
            "$ref": "#/components/schemas/Policy"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyRef": "#/components/schemas/PolicyRef",
            "Policy": "#/components/schemas/Policy",
            "ManagedPolicy": "#/components/schemas/ManagedPolicy"
          }
        }
      },
      "PolicyRefOrValue_FVO": {
        "type": "object",
        "description": "Container for Policy Reference or unmanaged Policy object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyRef_FVO"
          },
          {
            "$ref": "#/components/schemas/Policy_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyRef": "#/components/schemas/PolicyRef_FVO",
            "Policy": "#/components/schemas/Policy_FVO",
            "ManagedPolicy": "#/components/schemas/ManagedPolicy_FVO"
          }
        }
      },
      "PolicyRefOrValue_MVO": {
        "type": "object",
        "description": "Container for Policy Reference or unmanaged Policy object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyRef_MVO"
          },
          {
            "$ref": "#/components/schemas/Policy_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyRef": "#/components/schemas/PolicyRef_MVO",
            "Policy": "#/components/schemas/Policy_MVO",
            "ManagedPolicy": "#/components/schemas/ManagedPolicy_MVO"
          }
        }
      },
      "PolicyRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference_FVO_FVO_FVO_FVO"
          },
          {
            "type": "object",
            "description": "Reference to managed Policy object",
            "properties": {
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "version": {
                "type": "string"
              },
              "@type": {
                "type": "string",
                "description": "When sub-classing, this defines the sub-class Extensible name"
              },
              "@baseType": {
                "type": "string",
                "description": "When sub-classing, this defines the super-class"
              },
              "@schemaLocation": {
                "type": "string",
                "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
              }
            },
            "required": [
              "id"
            ]
          },
          {
            "type": "object",
            "description": "Reference to managed Policy object",
            "properties": {
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "version": {
                "type": "string"
              },
              "@type": {
                "type": "string",
                "description": "When sub-classing, this defines the sub-class Extensible name"
              },
              "@baseType": {
                "type": "string",
                "description": "When sub-classing, this defines the super-class"
              },
              "@schemaLocation": {
                "type": "string",
                "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
              }
            },
            "required": [
              "id"
            ]
          }
        ]
      },
      "PolicyRef_FVO_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference_FVO_FVO_FVO_FVO"
          },
          {
            "type": "object",
            "description": "Reference to managed Policy object",
            "properties": {
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "version": {
                "type": "string"
              },
              "@type": {
                "type": "string",
                "description": "When sub-classing, this defines the sub-class Extensible name"
              },
              "@baseType": {
                "type": "string",
                "description": "When sub-classing, this defines the super-class"
              },
              "@schemaLocation": {
                "type": "string",
                "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
              }
            },
            "required": [
              "id"
            ]
          },
          {
            "type": "object",
            "description": "Reference to managed Policy object",
            "properties": {
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "version": {
                "type": "string"
              },
              "@type": {
                "type": "string",
                "description": "When sub-classing, this defines the sub-class Extensible name"
              },
              "@baseType": {
                "type": "string",
                "description": "When sub-classing, this defines the super-class"
              },
              "@schemaLocation": {
                "type": "string",
                "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
              }
            },
            "required": [
              "id"
            ]
          }
        ]
      },
      "PolicyRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference_MVO"
          },
          {
            "type": "object",
            "description": "Reference to managed Policy object",
            "properties": {
              "id": {
                "type": "string",
                "description": "unique identifier"
              },
              "href": {
                "type": "string",
                "description": "Hyperlink reference"
              },
              "version": {
                "type": "string"
              },
              "@type": {
                "type": "string",
                "description": "When sub-classing, this defines the sub-class Extensible name"
              },
              "@baseType": {
                "type": "string",
                "description": "When sub-classing, this defines the super-class"
              },
              "@schemaLocation": {
                "type": "string",
                "description": "A URI to a JSON-Schema file that defines additional attributes and relationships"
              }
            }
          }
        ]
      },
      "PolicyRelationship": {
        "type": "object",
        "description": "Contains details of a PolicyRelationship",
        "properties": {
          "priority": {
            "type": "integer",
            "description": "Policy sequence value when Policy has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy.",
            "default": 0
          },
          "constraint": {
            "$ref": "#/components/schemas/PolicyConstraintRefOrValue"
          },
          "policyRefOrValue": {
            "$ref": "#/components/schemas/PolicyRefOrValue"
          }
        }
      },
      "PolicyRelationship_FVO": {
        "type": "object",
        "description": "Contains details of a PolicyRelationship",
        "properties": {
          "priority": {
            "type": "integer",
            "description": "Policy sequence value when Policy has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy.",
            "default": 0
          },
          "constraint": {
            "$ref": "#/components/schemas/PolicyConstraintRefOrValue_FVO"
          },
          "policyRefOrValue": {
            "$ref": "#/components/schemas/PolicyRefOrValue_FVO"
          }
        },
        "required": [
          "policyRefOrValue"
        ]
      },
      "PolicyRelationship_FVO_FVO": {
        "type": "object",
        "description": "Contains details of a PolicyRelationship",
        "properties": {
          "priority": {
            "type": "integer",
            "description": "Policy sequence value when Policy has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy.",
            "default": 0
          },
          "constraint": {
            "$ref": "#/components/schemas/PolicyConstraintRefOrValue_FVO"
          },
          "policyRefOrValue": {
            "$ref": "#/components/schemas/PolicyRefOrValue_FVO"
          }
        },
        "required": [
          "policyRefOrValue"
        ]
      },
      "PolicyRelationship_MVO": {
        "type": "object",
        "description": "Contains details of a PolicyRelationship",
        "properties": {
          "priority": {
            "type": "integer",
            "description": "Policy sequence value when Policy has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy.",
            "default": 0
          },
          "constraint": {
            "$ref": "#/components/schemas/PolicyConstraintRefOrValue_MVO"
          },
          "policyRefOrValue": {
            "$ref": "#/components/schemas/PolicyRefOrValue_MVO"
          }
        }
      },
      "PolicyRule": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyBase"
          },
          {
            "type": "object",
            "description": "A PolicyRule is an intelligent data container. It contains data that define how the PolicyRule is used in a managed environment as well as a specification of behavior that dictates how the managed entities that it applies to will interact. The contained data is of four types: \n * data and metadata that define the semantics and behavior of the policy rule and the behavior that it imposes on the rest of the system,\n * a group of events that can be used to trigger the evaluation of the condition clause of a policy rule,\n * a group of conditions aggregated by the PolicyRule,\n * group of actions aggregated by the PolicyRule.",
            "properties": {
              "@type": {
                "type": "string"
              },
              "targetPolicyEffect": {
                "type": "string",
                "description": "If underlying PolicyCondition resolves to TRUE, denotes target effect of a PolicyRule. If PolicyCondition is not resolved, then Policy effect is marked INDETERMINATE. If Policy is not run at all (because of Policy Constraints), then Policy effect is marked NOT_APPLICABLE.",
                "enum": [
                  "Permit",
                  "Deny"
                ]
              },
              "policyConditionRefOrValue": {
                "$ref": "#/components/schemas/PolicyConditionRefOrValue"
              }
            }
          }
        ]
      },
      "PolicyRule_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyBase_FVO"
          },
          {
            "type": "object",
            "description": "A PolicyRule is an intelligent data container. It contains data that define how the PolicyRule is used in a managed environment as well as a specification of behavior that dictates how the managed entities that it applies to will interact. The contained data is of four types: \n * data and metadata that define the semantics and behavior of the policy rule and the behavior that it imposes on the rest of the system,\n * a group of events that can be used to trigger the evaluation of the condition clause of a policy rule,\n * a group of conditions aggregated by the PolicyRule,\n * group of actions aggregated by the PolicyRule.",
            "properties": {
              "@type": {
                "type": "string"
              },
              "targetPolicyEffect": {
                "type": "string",
                "description": "If underlying PolicyCondition resolves to TRUE, denotes target effect of a PolicyRule. If PolicyCondition is not resolved, then Policy effect is marked INDETERMINATE. If Policy is not run at all (because of Policy Constraints), then Policy effect is marked NOT_APPLICABLE.",
                "enum": [
                  "Permit",
                  "Deny"
                ]
              },
              "policyConditionRefOrValue": {
                "$ref": "#/components/schemas/PolicyConditionRefOrValue_FVO"
              }
            },
            "required": [
              "@type",
              "targetPolicyEffect"
            ]
          },
          {
            "type": "object",
            "description": "A PolicyRule is an intelligent data container. It contains data that define how the PolicyRule is used in a managed environment as well as a specification of behavior that dictates how the managed entities that it applies to will interact. The contained data is of four types: \n * data and metadata that define the semantics and behavior of the policy rule and the behavior that it imposes on the rest of the system,\n * a group of events that can be used to trigger the evaluation of the condition clause of a policy rule,\n * a group of conditions aggregated by the PolicyRule,\n * group of actions aggregated by the PolicyRule.",
            "properties": {
              "@type": {
                "type": "string"
              },
              "targetPolicyEffect": {
                "type": "string",
                "description": "If underlying PolicyCondition resolves to TRUE, denotes target effect of a PolicyRule. If PolicyCondition is not resolved, then Policy effect is marked INDETERMINATE. If Policy is not run at all (because of Policy Constraints), then Policy effect is marked NOT_APPLICABLE.",
                "enum": [
                  "Permit",
                  "Deny"
                ]
              },
              "policyConditionRefOrValue": {
                "$ref": "#/components/schemas/PolicyConditionRefOrValue_FVO"
              }
            },
            "required": [
              "@type",
              "targetPolicyEffect"
            ]
          }
        ]
      },
      "PolicyRule_FVO_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyBase_FVO"
          },
          {
            "type": "object",
            "description": "A PolicyRule is an intelligent data container. It contains data that define how the PolicyRule is used in a managed environment as well as a specification of behavior that dictates how the managed entities that it applies to will interact. The contained data is of four types: \n * data and metadata that define the semantics and behavior of the policy rule and the behavior that it imposes on the rest of the system,\n * a group of events that can be used to trigger the evaluation of the condition clause of a policy rule,\n * a group of conditions aggregated by the PolicyRule,\n * group of actions aggregated by the PolicyRule.",
            "properties": {
              "@type": {
                "type": "string"
              },
              "targetPolicyEffect": {
                "type": "string",
                "description": "If underlying PolicyCondition resolves to TRUE, denotes target effect of a PolicyRule. If PolicyCondition is not resolved, then Policy effect is marked INDETERMINATE. If Policy is not run at all (because of Policy Constraints), then Policy effect is marked NOT_APPLICABLE.",
                "enum": [
                  "Permit",
                  "Deny"
                ]
              },
              "policyConditionRefOrValue": {
                "$ref": "#/components/schemas/PolicyConditionRefOrValue_FVO"
              }
            },
            "required": [
              "@type",
              "targetPolicyEffect"
            ]
          },
          {
            "type": "object",
            "description": "A PolicyRule is an intelligent data container. It contains data that define how the PolicyRule is used in a managed environment as well as a specification of behavior that dictates how the managed entities that it applies to will interact. The contained data is of four types: \n * data and metadata that define the semantics and behavior of the policy rule and the behavior that it imposes on the rest of the system,\n * a group of events that can be used to trigger the evaluation of the condition clause of a policy rule,\n * a group of conditions aggregated by the PolicyRule,\n * group of actions aggregated by the PolicyRule.",
            "properties": {
              "@type": {
                "type": "string"
              },
              "targetPolicyEffect": {
                "type": "string",
                "description": "If underlying PolicyCondition resolves to TRUE, denotes target effect of a PolicyRule. If PolicyCondition is not resolved, then Policy effect is marked INDETERMINATE. If Policy is not run at all (because of Policy Constraints), then Policy effect is marked NOT_APPLICABLE.",
                "enum": [
                  "Permit",
                  "Deny"
                ]
              },
              "policyConditionRefOrValue": {
                "$ref": "#/components/schemas/PolicyConditionRefOrValue_FVO"
              }
            },
            "required": [
              "@type",
              "targetPolicyEffect"
            ]
          }
        ]
      },
      "PolicyRule_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyBase_MVO"
          },
          {
            "type": "object",
            "description": "A PolicyRule is an intelligent data container. It contains data that define how the PolicyRule is used in a managed environment as well as a specification of behavior that dictates how the managed entities that it applies to will interact. The contained data is of four types: \n * data and metadata that define the semantics and behavior of the policy rule and the behavior that it imposes on the rest of the system,\n * a group of events that can be used to trigger the evaluation of the condition clause of a policy rule,\n * a group of conditions aggregated by the PolicyRule,\n * group of actions aggregated by the PolicyRule.",
            "properties": {
              "@type": {
                "type": "string"
              },
              "targetPolicyEffect": {
                "type": "string",
                "description": "If underlying PolicyCondition resolves to TRUE, denotes target effect of a PolicyRule. If PolicyCondition is not resolved, then Policy effect is marked INDETERMINATE. If Policy is not run at all (because of Policy Constraints), then Policy effect is marked NOT_APPLICABLE.",
                "enum": [
                  "Permit",
                  "Deny"
                ]
              },
              "policyConditionRefOrValue": {
                "$ref": "#/components/schemas/PolicyConditionRefOrValue_MVO"
              }
            }
          }
        ]
      },
      "PolicySet": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyBase"
          },
          {
            "type": "object",
            "description": "A PolicySet is an aggregation of PolicyRules or PolicySets combined according to provided algorithm",
            "properties": {
              "@type": {
                "type": "string"
              },
              "combiningAlgorithm": {
                "type": "string",
                "description": "defines a procedure for arriving at the result given the individual results of PolicyRule evaluations: \n * DenyOverrides - if a Policy element is encountered that evaluates to DENY, then, regardless of the evaluation result of the other Policy elements, the combined result is DENY. \n * PermitOverrides - if a Policy element is encountered that evaluates to PERMIT, then, regardless of the evaluation result of the other Policy elements, the combined result is PERMIT. \n * FirstApplicable - the combined result is the same as the result of successfull evaluating the first Policy. \n * OnlyOneApplicable - The result of this combining algorithm ensures that one and only one Policy is applicable by virtue of their targets.  If no Policy applies, then the result is NOT_APPLICABLE, but if more than one Policy is applicable, then the result is INDETERMINATE.  When exactly one Policy is applicable, the result of the combining algorithm is the result of that Policy. \n * DenyUnlessPermit - intended for those cases where a PERMIT decision should have priority over a DENY decision, and an INDETERMINATE or NOT_APPLICABLE must never be the result. \n * PermitUnlessDeny - intended for those cases where a DENY decision should have priority over a PERMIT decision, and an INDETERMINATE or NOT_APPLICABLE must never be the result.",
                "enum": [
                  "DenyOverrides",
                  "PermitOverrides",
                  "FirstApplicable",
                  "OnlyOneApplicable",
                  "DenyUnlessPermit",
                  "PermitUnlessDeny"
                ]
              },
              "policyRelationship": {
                "type": "array",
                "description": "List of all Policies that need to be executed",
                "items": {
                  "$ref": "#/components/schemas/PolicyRelationship"
                },
                "minItems": 1
              }
            }
          }
        ]
      },
      "PolicySet_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyBase_FVO"
          },
          {
            "type": "object",
            "description": "A PolicySet is an aggregation of PolicyRules or PolicySets combined according to provided algorithm",
            "properties": {
              "@type": {
                "type": "string"
              },
              "combiningAlgorithm": {
                "type": "string",
                "description": "defines a procedure for arriving at the result given the individual results of PolicyRule evaluations: \n * DenyOverrides - if a Policy element is encountered that evaluates to DENY, then, regardless of the evaluation result of the other Policy elements, the combined result is DENY. \n * PermitOverrides - if a Policy element is encountered that evaluates to PERMIT, then, regardless of the evaluation result of the other Policy elements, the combined result is PERMIT. \n * FirstApplicable - the combined result is the same as the result of successfull evaluating the first Policy. \n * OnlyOneApplicable - The result of this combining algorithm ensures that one and only one Policy is applicable by virtue of their targets.  If no Policy applies, then the result is NOT_APPLICABLE, but if more than one Policy is applicable, then the result is INDETERMINATE.  When exactly one Policy is applicable, the result of the combining algorithm is the result of that Policy. \n * DenyUnlessPermit - intended for those cases where a PERMIT decision should have priority over a DENY decision, and an INDETERMINATE or NOT_APPLICABLE must never be the result. \n * PermitUnlessDeny - intended for those cases where a DENY decision should have priority over a PERMIT decision, and an INDETERMINATE or NOT_APPLICABLE must never be the result.",
                "enum": [
                  "DenyOverrides",
                  "PermitOverrides",
                  "FirstApplicable",
                  "OnlyOneApplicable",
                  "DenyUnlessPermit",
                  "PermitUnlessDeny"
                ]
              },
              "policyRelationship": {
                "type": "array",
                "description": "List of all Policies that need to be executed",
                "items": {
                  "$ref": "#/components/schemas/PolicyRelationship_FVO"
                },
                "minItems": 1
              }
            },
            "required": [
              "@type",
              "combiningAlgorithm",
              "policyRelationship"
            ]
          },
          {
            "type": "object",
            "description": "A PolicySet is an aggregation of PolicyRules or PolicySets combined according to provided algorithm",
            "properties": {
              "@type": {
                "type": "string"
              },
              "combiningAlgorithm": {
                "type": "string",
                "description": "defines a procedure for arriving at the result given the individual results of PolicyRule evaluations: \n * DenyOverrides - if a Policy element is encountered that evaluates to DENY, then, regardless of the evaluation result of the other Policy elements, the combined result is DENY. \n * PermitOverrides - if a Policy element is encountered that evaluates to PERMIT, then, regardless of the evaluation result of the other Policy elements, the combined result is PERMIT. \n * FirstApplicable - the combined result is the same as the result of successfull evaluating the first Policy. \n * OnlyOneApplicable - The result of this combining algorithm ensures that one and only one Policy is applicable by virtue of their targets.  If no Policy applies, then the result is NOT_APPLICABLE, but if more than one Policy is applicable, then the result is INDETERMINATE.  When exactly one Policy is applicable, the result of the combining algorithm is the result of that Policy. \n * DenyUnlessPermit - intended for those cases where a PERMIT decision should have priority over a DENY decision, and an INDETERMINATE or NOT_APPLICABLE must never be the result. \n * PermitUnlessDeny - intended for those cases where a DENY decision should have priority over a PERMIT decision, and an INDETERMINATE or NOT_APPLICABLE must never be the result.",
                "enum": [
                  "DenyOverrides",
                  "PermitOverrides",
                  "FirstApplicable",
                  "OnlyOneApplicable",
                  "DenyUnlessPermit",
                  "PermitUnlessDeny"
                ]
              },
              "policyRelationship": {
                "type": "array",
                "description": "List of all Policies that need to be executed",
                "items": {
                  "$ref": "#/components/schemas/PolicyRelationship_FVO"
                },
                "minItems": 1
              }
            },
            "required": [
              "@type",
              "combiningAlgorithm",
              "policyRelationship"
            ]
          }
        ]
      },
      "PolicySet_FVO_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyBase_FVO"
          },
          {
            "type": "object",
            "description": "A PolicySet is an aggregation of PolicyRules or PolicySets combined according to provided algorithm",
            "properties": {
              "@type": {
                "type": "string"
              },
              "combiningAlgorithm": {
                "type": "string",
                "description": "defines a procedure for arriving at the result given the individual results of PolicyRule evaluations: \n * DenyOverrides - if a Policy element is encountered that evaluates to DENY, then, regardless of the evaluation result of the other Policy elements, the combined result is DENY. \n * PermitOverrides - if a Policy element is encountered that evaluates to PERMIT, then, regardless of the evaluation result of the other Policy elements, the combined result is PERMIT. \n * FirstApplicable - the combined result is the same as the result of successfull evaluating the first Policy. \n * OnlyOneApplicable - The result of this combining algorithm ensures that one and only one Policy is applicable by virtue of their targets.  If no Policy applies, then the result is NOT_APPLICABLE, but if more than one Policy is applicable, then the result is INDETERMINATE.  When exactly one Policy is applicable, the result of the combining algorithm is the result of that Policy. \n * DenyUnlessPermit - intended for those cases where a PERMIT decision should have priority over a DENY decision, and an INDETERMINATE or NOT_APPLICABLE must never be the result. \n * PermitUnlessDeny - intended for those cases where a DENY decision should have priority over a PERMIT decision, and an INDETERMINATE or NOT_APPLICABLE must never be the result.",
                "enum": [
                  "DenyOverrides",
                  "PermitOverrides",
                  "FirstApplicable",
                  "OnlyOneApplicable",
                  "DenyUnlessPermit",
                  "PermitUnlessDeny"
                ]
              },
              "policyRelationship": {
                "type": "array",
                "description": "List of all Policies that need to be executed",
                "items": {
                  "$ref": "#/components/schemas/PolicyRelationship_FVO"
                },
                "minItems": 1
              }
            },
            "required": [
              "@type",
              "combiningAlgorithm",
              "policyRelationship"
            ]
          },
          {
            "type": "object",
            "description": "A PolicySet is an aggregation of PolicyRules or PolicySets combined according to provided algorithm",
            "properties": {
              "@type": {
                "type": "string"
              },
              "combiningAlgorithm": {
                "type": "string",
                "description": "defines a procedure for arriving at the result given the individual results of PolicyRule evaluations: \n * DenyOverrides - if a Policy element is encountered that evaluates to DENY, then, regardless of the evaluation result of the other Policy elements, the combined result is DENY. \n * PermitOverrides - if a Policy element is encountered that evaluates to PERMIT, then, regardless of the evaluation result of the other Policy elements, the combined result is PERMIT. \n * FirstApplicable - the combined result is the same as the result of successfull evaluating the first Policy. \n * OnlyOneApplicable - The result of this combining algorithm ensures that one and only one Policy is applicable by virtue of their targets.  If no Policy applies, then the result is NOT_APPLICABLE, but if more than one Policy is applicable, then the result is INDETERMINATE.  When exactly one Policy is applicable, the result of the combining algorithm is the result of that Policy. \n * DenyUnlessPermit - intended for those cases where a PERMIT decision should have priority over a DENY decision, and an INDETERMINATE or NOT_APPLICABLE must never be the result. \n * PermitUnlessDeny - intended for those cases where a DENY decision should have priority over a PERMIT decision, and an INDETERMINATE or NOT_APPLICABLE must never be the result.",
                "enum": [
                  "DenyOverrides",
                  "PermitOverrides",
                  "FirstApplicable",
                  "OnlyOneApplicable",
                  "DenyUnlessPermit",
                  "PermitUnlessDeny"
                ]
              },
              "policyRelationship": {
                "type": "array",
                "description": "List of all Policies that need to be executed",
                "items": {
                  "$ref": "#/components/schemas/PolicyRelationship_FVO"
                },
                "minItems": 1
              }
            },
            "required": [
              "@type",
              "combiningAlgorithm",
              "policyRelationship"
            ]
          }
        ]
      },
      "PolicySet_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/PolicyBase_MVO"
          },
          {
            "type": "object",
            "description": "A PolicySet is an aggregation of PolicyRules or PolicySets combined according to provided algorithm",
            "properties": {
              "@type": {
                "type": "string"
              },
              "combiningAlgorithm": {
                "type": "string",
                "description": "defines a procedure for arriving at the result given the individual results of PolicyRule evaluations: \n * DenyOverrides - if a Policy element is encountered that evaluates to DENY, then, regardless of the evaluation result of the other Policy elements, the combined result is DENY. \n * PermitOverrides - if a Policy element is encountered that evaluates to PERMIT, then, regardless of the evaluation result of the other Policy elements, the combined result is PERMIT. \n * FirstApplicable - the combined result is the same as the result of successfull evaluating the first Policy. \n * OnlyOneApplicable - The result of this combining algorithm ensures that one and only one Policy is applicable by virtue of their targets.  If no Policy applies, then the result is NOT_APPLICABLE, but if more than one Policy is applicable, then the result is INDETERMINATE.  When exactly one Policy is applicable, the result of the combining algorithm is the result of that Policy. \n * DenyUnlessPermit - intended for those cases where a PERMIT decision should have priority over a DENY decision, and an INDETERMINATE or NOT_APPLICABLE must never be the result. \n * PermitUnlessDeny - intended for those cases where a DENY decision should have priority over a PERMIT decision, and an INDETERMINATE or NOT_APPLICABLE must never be the result.",
                "enum": [
                  "DenyOverrides",
                  "PermitOverrides",
                  "FirstApplicable",
                  "OnlyOneApplicable",
                  "DenyUnlessPermit",
                  "PermitUnlessDeny"
                ]
              },
              "policyRelationship": {
                "type": "array",
                "description": "List of all Policies that need to be executed",
                "items": {
                  "$ref": "#/components/schemas/PolicyRelationship_MVO"
                },
                "minItems": 1
              }
            }
          }
        ]
      },
      "PolicyStatement": {
        "type": "object",
        "description": "PolicyStatement is a definition of a: \n * query statement that resolves to boolean value or \n * command statement that is changing a value",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyOperatorRefOrValue"
          },
          {
            "$ref": "#/components/schemas/PolicyExpressionRefOrValue"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyOperatorRefOrValue": "#/components/schemas/PolicyOperatorRefOrValue",
            "PolicyExpressionRefOrValue": "#/components/schemas/PolicyExpressionRefOrValue"
          }
        }
      },
      "PolicyStatement_FVO": {
        "type": "object",
        "description": "PolicyStatement is a definition of a: \n * query statement that resolves to boolean value or \n * command statement that is changing a value",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyOperatorRefOrValue_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicyExpressionRefOrValue_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyOperatorRefOrValue": "#/components/schemas/PolicyOperatorRefOrValue_FVO",
            "PolicyExpressionRefOrValue": "#/components/schemas/PolicyExpressionRefOrValue_FVO"
          }
        }
      },
      "PolicyStatement_MVO": {
        "type": "object",
        "description": "PolicyStatement is a definition of a: \n * query statement that resolves to boolean value or \n * command statement that is changing a value",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyOperatorRefOrValue_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicyExpressionRefOrValue_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyOperatorRefOrValue": "#/components/schemas/PolicyOperatorRefOrValue_MVO",
            "PolicyExpressionRefOrValue": "#/components/schemas/PolicyExpressionRefOrValue_MVO"
          }
        }
      },
      "PolicyVariable": {
        "type": "object",
        "description": "A PolicyVariable is an entity for modeling different types of variables that can be used to form a PolicyCondition statement. It can be static or dynamic.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyVariableDynamic"
          },
          {
            "$ref": "#/components/schemas/PolicyVariableStatic"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyVariableDynamic": "#/components/schemas/PolicyVariableDynamic",
            "PolicyVariableStatic": "#/components/schemas/PolicyVariableStatic"
          }
        }
      },
      "PolicyVariableDynamic": {
        "type": "object",
        "description": "A PolicyVariableDynamic is a variable that is resolved from event, environment or subject",
        "properties": {
          "@type": {
            "type": "string"
          },
          "valueType": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "object",
              "array"
            ]
          },
          "format": {
            "type": "string"
          },
          "resolver": {
            "type": "array",
            "description": "Specification of a varaible resolver",
            "items": {
              "$ref": "#/components/schemas/PolicyVariableResolver"
            },
            "minItems": 1
          }
        }
      },
      "PolicyVariableDynamic_FVO": {
        "type": "object",
        "description": "A PolicyVariableDynamic is a variable that is resolved from event, environment or subject",
        "properties": {
          "@type": {
            "type": "string"
          },
          "valueType": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "object",
              "array"
            ]
          },
          "format": {
            "type": "string"
          },
          "resolver": {
            "type": "array",
            "description": "Specification of a varaible resolver",
            "items": {
              "$ref": "#/components/schemas/PolicyVariableResolver_FVO"
            },
            "minItems": 1
          }
        },
        "required": [
          "valueType",
          "resolver"
        ]
      },
      "PolicyVariableDynamic_FVO_FVO": {
        "type": "object",
        "description": "A PolicyVariableDynamic is a variable that is resolved from event, environment or subject",
        "properties": {
          "@type": {
            "type": "string"
          },
          "valueType": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "object",
              "array"
            ]
          },
          "format": {
            "type": "string"
          },
          "resolver": {
            "type": "array",
            "description": "Specification of a varaible resolver",
            "items": {
              "$ref": "#/components/schemas/PolicyVariableResolver_FVO"
            },
            "minItems": 1
          }
        },
        "required": [
          "valueType",
          "resolver"
        ]
      },
      "PolicyVariableDynamic_MVO": {
        "type": "object",
        "description": "A PolicyVariableDynamic is a variable that is resolved from event, environment or subject",
        "properties": {
          "@type": {
            "type": "string"
          },
          "valueType": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "object",
              "array"
            ]
          },
          "format": {
            "type": "string"
          },
          "resolver": {
            "type": "array",
            "description": "Specification of a varaible resolver",
            "items": {
              "$ref": "#/components/schemas/PolicyVariableResolver_MVO"
            },
            "minItems": 1
          }
        }
      },
      "PolicyVariableRef": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "type": "object",
            "description": "Reference to managed PolicyVariable object",
            "properties": {
              "@type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyVariableRefOrValue": {
        "type": "object",
        "description": "Container for PolicyVariable Reference or unmanaged PolicyVariable object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyVariableRef"
          },
          {
            "$ref": "#/components/schemas/PolicyVariable"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyVariableRef": "#/components/schemas/PolicyVariableRef",
            "PolicyVariable": "#/components/schemas/PolicyVariable",
            "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable"
          }
        }
      },
      "PolicyVariableRefOrValue_FVO": {
        "type": "object",
        "description": "Container for PolicyVariable Reference or unmanaged PolicyVariable object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyVariableRef_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicyVariable_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyVariableRef": "#/components/schemas/PolicyVariableRef_FVO",
            "PolicyVariable": "#/components/schemas/PolicyVariable_FVO",
            "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable_FVO"
          }
        }
      },
      "PolicyVariableRefOrValue_MVO": {
        "type": "object",
        "description": "Container for PolicyVariable Reference or unmanaged PolicyVariable object",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyVariableRef_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicyVariable_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyVariableRef": "#/components/schemas/PolicyVariableRef_MVO",
            "PolicyVariable": "#/components/schemas/PolicyVariable_MVO",
            "ManagedPolicyVariable": "#/components/schemas/ManagedPolicyVariable_MVO"
          }
        }
      },
      "PolicyVariableRef_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference_FVO_FVO"
          },
          {
            "type": "object",
            "description": "Reference to managed PolicyVariable object",
            "properties": {
              "@type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyVariableRef_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Reference_MVO"
          },
          {
            "type": "object",
            "description": "Reference to managed PolicyVariable object",
            "properties": {
              "@type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "PolicyVariableResolver": {
        "type": "object",
        "description": "A PolicyVariableResolver is a definition that describes from where is DynamicVariable fetched",
        "properties": {
          "@type": {
            "type": "string"
          },
          "source": {
            "type": "string",
            "enum": [
              "event",
              "environment",
              "subject",
              "result"
            ]
          },
          "path": {
            "description": "JSONPath of a variable",
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "description": "Sequence value when PolicyVariableResolver has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy.",
            "default": 0
          },
          "constraint": {
            "$ref": "#/components/schemas/PolicyConstraintRefOrValue"
          }
        }
      },
      "PolicyVariableResolver_FVO": {
        "type": "object",
        "description": "A PolicyVariableResolver is a definition that describes from where is DynamicVariable fetched",
        "properties": {
          "@type": {
            "type": "string"
          },
          "source": {
            "type": "string",
            "enum": [
              "event",
              "environment",
              "subject",
              "result"
            ]
          },
          "path": {
            "description": "JSONPath of a variable",
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "description": "Sequence value when PolicyVariableResolver has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy.",
            "default": 0
          },
          "constraint": {
            "$ref": "#/components/schemas/PolicyConstraintRefOrValue_FVO"
          }
        },
        "required": [
          "source",
          "@type"
        ]
      },
      "PolicyVariableResolver_FVO_FVO": {
        "type": "object",
        "description": "A PolicyVariableResolver is a definition that describes from where is DynamicVariable fetched",
        "properties": {
          "@type": {
            "type": "string"
          },
          "source": {
            "type": "string",
            "enum": [
              "event",
              "environment",
              "subject",
              "result"
            ]
          },
          "path": {
            "description": "JSONPath of a variable",
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "description": "Sequence value when PolicyVariableResolver has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy.",
            "default": 0
          },
          "constraint": {
            "$ref": "#/components/schemas/PolicyConstraintRefOrValue_FVO"
          }
        },
        "required": [
          "source",
          "@type"
        ]
      },
      "PolicyVariableResolver_MVO": {
        "type": "object",
        "description": "A PolicyVariableResolver is a definition that describes from where is DynamicVariable fetched",
        "properties": {
          "@type": {
            "type": "string"
          },
          "source": {
            "type": "string",
            "enum": [
              "event",
              "environment",
              "subject",
              "result"
            ]
          },
          "path": {
            "description": "JSONPath of a variable",
            "type": "string"
          },
          "priority": {
            "type": "integer",
            "description": "Sequence value when PolicyVariableResolver has to be executed in a specific order. Higher value means greater priority. Priority is not absolute, but relative in hierarchy.",
            "default": 0
          },
          "constraint": {
            "$ref": "#/components/schemas/PolicyConstraintRefOrValue_MVO"
          }
        }
      },
      "PolicyVariableStatic": {
        "type": "object",
        "description": "A PolicyVariableStatic is a variable that is ",
        "properties": {
          "@type": {
            "type": "string"
          },
          "valueType": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "object",
              "array"
            ]
          },
          "format": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/AnyValue"
          }
        }
      },
      "PolicyVariableStatic_FVO": {
        "type": "object",
        "description": "A PolicyVariableStatic is a variable that is ",
        "properties": {
          "@type": {
            "type": "string"
          },
          "valueType": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "object",
              "array"
            ]
          },
          "format": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/AnyValue"
          }
        },
        "required": [
          "valueType",
          "value"
        ]
      },
      "PolicyVariableStatic_FVO_FVO": {
        "type": "object",
        "description": "A PolicyVariableStatic is a variable that is ",
        "properties": {
          "@type": {
            "type": "string"
          },
          "valueType": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "object",
              "array"
            ]
          },
          "format": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/AnyValue"
          }
        },
        "required": [
          "valueType",
          "value"
        ]
      },
      "PolicyVariableStatic_MVO": {
        "type": "object",
        "description": "A PolicyVariableStatic is a variable that is ",
        "properties": {
          "@type": {
            "type": "string"
          },
          "valueType": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "integer",
              "boolean",
              "object",
              "array"
            ]
          },
          "format": {
            "type": "string"
          },
          "value": {
            "$ref": "#/components/schemas/AnyValue"
          }
        }
      },
      "PolicyVariable_FVO": {
        "type": "object",
        "description": "A PolicyVariable is an entity for modeling different types of variables that can be used to form a PolicyCondition statement. It can be static or dynamic.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyVariableDynamic_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicyVariableStatic_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyVariableDynamic": "#/components/schemas/PolicyVariableDynamic_FVO",
            "PolicyVariableStatic": "#/components/schemas/PolicyVariableStatic_FVO"
          }
        }
      },
      "PolicyVariable_MVO": {
        "type": "object",
        "description": "A PolicyVariable is an entity for modeling different types of variables that can be used to form a PolicyCondition statement. It can be static or dynamic.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyVariableDynamic_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicyVariableStatic_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyVariableDynamic": "#/components/schemas/PolicyVariableDynamic_MVO",
            "PolicyVariableStatic": "#/components/schemas/PolicyVariableStatic_MVO"
          }
        }
      },
      "Policy_FVO": {
        "type": "object",
        "description": "Policy is a set of rules that are used to manage and control the state and state transitions of one or more managed objects.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyRule_FVO"
          },
          {
            "$ref": "#/components/schemas/PolicySet_FVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyRule": "#/components/schemas/PolicyRule_FVO",
            "PolicySet": "#/components/schemas/PolicySet_FVO"
          }
        }
      },
      "Policy_MVO": {
        "type": "object",
        "description": "Policy is a set of rules that are used to manage and control the state and state transitions of one or more managed objects.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/PolicyRule_MVO"
          },
          {
            "$ref": "#/components/schemas/PolicySet_MVO"
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "PolicyRule": "#/components/schemas/PolicyRule_MVO",
            "PolicySet": "#/components/schemas/PolicySet_MVO"
          }
        }
      },
      "Reference": {
        "type": "object",
        "description": "Reference schema .",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the referred entity."
          },
          "name": {
            "type": "string",
            "description": "Name of the referred entity."
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "required": [
          "id"
        ]
      },
      "Reference_FVO": {
        "type": "object",
        "description": "Reference schema .",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the referred entity."
          },
          "name": {
            "type": "string",
            "description": "Name of the referred entity."
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "required": [
          "id"
        ]
      },
      "Reference_FVO_FVO": {
        "type": "object",
        "description": "Reference schema .",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the referred entity."
          },
          "name": {
            "type": "string",
            "description": "Name of the referred entity."
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "required": [
          "id"
        ]
      },
      "Reference_FVO_FVO_FVO": {
        "type": "object",
        "description": "Reference schema .",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the referred entity."
          },
          "name": {
            "type": "string",
            "description": "Name of the referred entity."
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "required": [
          "id"
        ]
      },
      "Reference_FVO_FVO_FVO_FVO": {
        "type": "object",
        "description": "Reference schema .",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the referred entity."
          },
          "name": {
            "type": "string",
            "description": "Name of the referred entity."
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "required": [
          "id"
        ]
      },
      "Reference_FVO_FVO_FVO_FVO_FVO": {
        "type": "object",
        "description": "Reference schema .",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the referred entity."
          },
          "name": {
            "type": "string",
            "description": "Name of the referred entity."
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        },
        "required": [
          "id"
        ]
      },
      "Reference_MVO": {
        "type": "object",
        "description": "Reference schema .",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier of the referred entity."
          },
          "name": {
            "type": "string",
            "description": "Name of the referred entity."
          },
          "@referredType": {
            "type": "string",
            "description": "The actual type of the target instance when needed for disambiguation."
          }
        }
      },
      "RelatedParty": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "$ref": "#/components/schemas/Reference"
          },
          {
            "type": "object",
            "description": "Related Entity reference. A related party defines party linked to a specific entity.",
            "properties": {
              "role": {
                "type": "string",
                "description": "Role played by the related party"
              }
            }
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "RelatedParty": "#/components/schemas/RelatedParty"
          }
        }
      },
      "RelatedParty_FVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "$ref": "#/components/schemas/Reference_FVO_FVO_FVO_FVO_FVO"
          },
          {
            "type": "object",
            "description": "Related Entity reference. A related party defines party linked to a specific entity.",
            "properties": {
              "role": {
                "type": "string",
                "description": "Role played by the related party"
              }
            },
            "required": [
              "@referredType",
              "role"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "RelatedParty": "#/components/schemas/RelatedParty_FVO"
          }
        }
      },
      "RelatedParty_MVO": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "$ref": "#/components/schemas/EntityRef"
          },
          {
            "$ref": "#/components/schemas/Reference_MVO"
          },
          {
            "type": "object",
            "description": "Related Entity reference. A related party defines party linked to a specific entity.",
            "properties": {
              "role": {
                "type": "string",
                "description": "Role played by the related party"
              }
            },
            "required": [
              "@referredType",
              "role"
            ]
          }
        ],
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "RelatedParty": "#/components/schemas/RelatedParty_MVO"
          }
        }
      },
      "TimePeriod": {
        "type": "object",
        "description": "A period of time, either as a deadline (endDateTime only) a startDateTime only, or both",
        "properties": {
          "startDateTime": {
            "description": "Start of the time period, using IETC-RFC-3339 format",
            "type": "string",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          },
          "endDateTime": {
            "description": "End of the time period, using IETC-RFC-3339 format",
            "type": "string",
            "format": "date-time",
            "example": "1985-04-12T23:20:50.52Z"
          }
        }
      },
      "Error": {
        "discriminator": {
          "propertyName": "@type",
          "mapping": {
            "Error": "#/components/schemas/Error"
          }
        },
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "type": "object",
            "required": [
              "code",
              "reason"
            ],
            "properties": {
              "code": {
                "type": "string",
                "description": "Application relevant detail, defined in the API or a common list."
              },
              "reason": {
                "type": "string",
                "description": "Explanation of the reason for the error which can be shown to a client user."
              },
              "message": {
                "type": "string",
                "description": "More details and corrective actions related to the error which can be shown to a client user."
              },
              "status": {
                "type": "string",
                "description": "HTTP Error code extension"
              },
              "referenceError": {
                "type": "string",
                "description": "URI of documentation describing the error."
              }
            }
          }
        ],
        "description": "Used when an API throws an Error, typically with a HTTP error response-code (3xx, 4xx, 5xx)"
      },
      "Hub_FVO": {
        "type": "object",
        "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
        "required": [
          "callback"
        ],
        "allOf": [
          {
            "$ref": "#/components/schemas/Extensible"
          },
          {
            "properties": {
              "callback": {
                "type": "string",
                "description": "The callback being registered."
              },
              "query": {
                "type": "string",
                "description": "additional data to be passed"
              }
            }
          }
        ]
      },
      "Hub": {
        "type": "object",
        "description": "Sets the communication endpoint address the service instance must use to deliver notification information",
        "allOf": [
          {
            "$ref": "#/components/schemas/Entity"
          },
          {
            "properties": {
              "id": {
                "type": "string",
                "description": "Id of the listener"
              },
              "callback": {
                "type": "string",
                "description": "The callback being registered."
              },
              "query": {
                "type": "string",
                "description": "additional data to be passed"
              }
            },
            "required": [
              "callback"
            ]
          }
        ]
      },
      "JsonPatch": {
        "description": "A JSONPatch document as defined by RFC 6902",
        "required": [
          "op",
          "path"
        ],
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to be performed",
            "enum": [
              "add",
              "remove",
              "replace",
              "move",
              "copy",
              "test"
            ]
          },
          "path": {
            "type": "string",
            "description": "A JSON-Pointer"
          },
          "value": {
            "description": "The value to be used within the operations."
          },
          "from": {
            "type": "string",
            "description": "A string containing a JSON Pointer value."
          }
        }
      },
      "JsonPatchOperations": {
        "description": "JSONPatch Operations document as defined by RFC 6902",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/JsonPatch"
        }
      }
    },
    "parameters": {
      "Id": {
        "name": "id",
        "required": true,
        "schema": {
          "type": "string"
        },
        "in": "path",
        "description": "Identifier of the Service"
      },
      "Fields": {
        "name": "fields",
        "in": "query",
        "description": "Comma-separated properties to be provided in response",
        "schema": {
          "type": "string"
        }
      },
      "Offset": {
        "name": "offset",
        "in": "query",
        "description": "Requested index for start of resources to be provided in response",
        "schema": {
          "type": "integer"
        }
      },
      "Limit": {
        "name": "limit",
        "in": "query",
        "description": "Requested number of resources to be provided in response",
        "schema": {
          "type": "integer"
        }
      }
    },
    "requestBodies": {
      "ManagedPolicy_FVO": {
        "description": "The ManagedPolicy to be created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicy_FVO"
            }
          }
        },
        "required": true
      },
      "ManagedPolicy_MVO": {
        "description": "The ManagedPolicy to be patched",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicy_MVO"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicy_MVO"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchOperations"
              }
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchOperations"
              }
            }
          }
        },
        "required": true
      },
      "ManagedPolicyCreateEvent": {
        "description": "ManagedPolicy create Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyCreateEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyAttributeValueChangeEvent": {
        "description": "ManagedPolicy attributeValueChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyAttributeValueChangeEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyDeleteEvent": {
        "description": "ManagedPolicy delete Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyDeleteEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyStatusChangeEvent": {
        "description": "ManagedPolicy statusChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyStateChangeEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyCondition_FVO": {
        "description": "The ManagedPolicyCondition to be created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyCondition_FVO"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyCondition_MVO": {
        "description": "The ManagedPolicyCondition to be patched",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyCondition_MVO"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyCondition_MVO"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchOperations"
              }
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchOperations"
              }
            }
          }
        },
        "required": true
      },
      "ManagedPolicyConditionCreateEvent": {
        "description": "ManagedPolicyCondition create Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyConditionCreateEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyConditionAttributeValueChangeEvent": {
        "description": "ManagedPolicyCondition attributeValueChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyConditionAttributeValueChangeEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyConditionDeleteEvent": {
        "description": "ManagedPolicyCondition delete Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyConditionDeleteEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyConditionStatusChangeEvent": {
        "description": "ManagedPolicyCondition statusChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyConditionStateChangeEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyEvent_FVO": {
        "description": "The ManagedPolicyEvent to be created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyEvent_FVO"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyEvent_MVO": {
        "description": "The ManagedPolicyEvent to be patched",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyEvent_MVO"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyEvent_MVO"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchOperations"
              }
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchOperations"
              }
            }
          }
        },
        "required": true
      },
      "ManagedPolicyEventCreateEvent": {
        "description": "ManagedPolicyEvent create Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyEventCreateEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyEventAttributeValueChangeEvent": {
        "description": "ManagedPolicyEvent attributeValueChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyEventAttributeValueChangeEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyEventDeleteEvent": {
        "description": "ManagedPolicyEvent delete Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyEventDeleteEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyEventStatusChangeEvent": {
        "description": "ManagedPolicyEvent statusChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyEventStateChangeEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyExpression_FVO": {
        "description": "The ManagedPolicyExpression to be created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyExpression_FVO"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyExpression_MVO": {
        "description": "The ManagedPolicyExpression to be patched",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyExpression_MVO"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyExpression_MVO"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchOperations"
              }
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchOperations"
              }
            }
          }
        },
        "required": true
      },
      "ManagedPolicyExpressionCreateEvent": {
        "description": "ManagedPolicyExpression create Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyExpressionCreateEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyExpressionAttributeValueChangeEvent": {
        "description": "ManagedPolicyExpression attributeValueChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyExpressionAttributeValueChangeEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyExpressionDeleteEvent": {
        "description": "ManagedPolicyExpression delete Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyExpressionDeleteEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyExpressionStatusChangeEvent": {
        "description": "ManagedPolicyExpression statusChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyExpressionStateChangeEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyOperator_FVO": {
        "description": "The ManagedPolicyOperator to be created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyOperator_FVO"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyOperator_MVO": {
        "description": "The ManagedPolicyOperator to be patched",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyOperator_MVO"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyOperator_MVO"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchOperations"
              }
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchOperations"
              }
            }
          }
        },
        "required": true
      },
      "ManagedPolicyOperatorCreateEvent": {
        "description": "ManagedPolicyOperator create Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyOperatorCreateEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyOperatorAttributeValueChangeEvent": {
        "description": "ManagedPolicyOperator attributeValueChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyOperatorAttributeValueChangeEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyOperatorDeleteEvent": {
        "description": "ManagedPolicyOperator delete Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyOperatorDeleteEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyOperatorStatusChangeEvent": {
        "description": "ManagedPolicyOperator statusChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyOperatorStateChangeEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyVariable_FVO": {
        "description": "The ManagedPolicyVariable to be created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyVariable_FVO"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyVariable_MVO": {
        "description": "The ManagedPolicyVariable to be patched",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyVariable_MVO"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyVariable_MVO"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchOperations"
              }
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchOperations"
              }
            }
          }
        },
        "required": true
      },
      "ManagedPolicyVariableCreateEvent": {
        "description": "ManagedPolicyVariable create Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyVariableCreateEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyVariableAttributeValueChangeEvent": {
        "description": "ManagedPolicyVariable attributeValueChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyVariableAttributeValueChangeEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyVariableDeleteEvent": {
        "description": "ManagedPolicyVariable delete Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyVariableDeleteEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyVariableStatusChangeEvent": {
        "description": "ManagedPolicyVariable statusChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyVariableStateChangeEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyAction_FVO": {
        "description": "The ManagedPolicyAction to be created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyAction_FVO"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyAction_MVO": {
        "description": "The ManagedPolicyAction to be patched",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyAction_MVO"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyAction_MVO"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchOperations"
              }
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchOperations"
              }
            }
          }
        },
        "required": true
      },
      "ManagedPolicyActionCreateEvent": {
        "description": "ManagedPolicyAction create Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyActionCreateEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyActionAttributeValueChangeEvent": {
        "description": "ManagedPolicyAction attributeValueChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyActionAttributeValueChangeEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyActionDeleteEvent": {
        "description": "ManagedPolicyAction delete Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyActionDeleteEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyActionStatusChangeEvent": {
        "description": "ManagedPolicyAction statusChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyActionStateChangeEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyConstraint_FVO": {
        "description": "The ManagedPolicyConstraint to be created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyConstraint_FVO"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyConstraint_MVO": {
        "description": "The ManagedPolicyConstraint to be patched",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyConstraint_MVO"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyConstraint_MVO"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchOperations"
              }
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchOperations"
              }
            }
          }
        },
        "required": true
      },
      "ManagedPolicyConstraintCreateEvent": {
        "description": "ManagedPolicyConstraint create Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyConstraintCreateEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyConstraintAttributeValueChangeEvent": {
        "description": "ManagedPolicyConstraint attributeValueChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyConstraintAttributeValueChangeEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyConstraintDeleteEvent": {
        "description": "ManagedPolicyConstraint delete Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyConstraintDeleteEvent"
            }
          }
        },
        "required": true
      },
      "ManagedPolicyConstraintStatusChangeEvent": {
        "description": "ManagedPolicyConstraint statusChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyConstraintStateChangeEvent"
            }
          }
        },
        "required": true
      },
      "PolicyDomain_FVO": {
        "description": "The PolicyDomain to be created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyDomain_FVO"
            }
          }
        },
        "required": true
      },
      "PolicyDomain_MVO": {
        "description": "The PolicyDomain to be patched",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyDomain_MVO"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyDomain_MVO"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchOperations"
              }
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchOperations"
              }
            }
          }
        },
        "required": true
      },
      "PolicyDomainCreateEvent": {
        "description": "PolicyDomain create Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyDomainCreateEvent"
            }
          }
        },
        "required": true
      },
      "PolicyDomainAttributeValueChangeEvent": {
        "description": "PolicyDomain attributeValueChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyDomainAttributeValueChangeEvent"
            }
          }
        },
        "required": true
      },
      "PolicyDomainDeleteEvent": {
        "description": "PolicyDomain delete Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyDomainDeleteEvent"
            }
          }
        },
        "required": true
      },
      "PolicyDomainStatusChangeEvent": {
        "description": "PolicyDomain statusChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyDomainStateChangeEvent"
            }
          }
        },
        "required": true
      },
      "PolicyCatalog_FVO": {
        "description": "The PolicyCatalog to be created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyCatalog_FVO"
            }
          }
        },
        "required": true
      },
      "PolicyCatalog_MVO": {
        "description": "The PolicyCatalog to be patched",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyCatalog_MVO"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyCatalog_MVO"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchOperations"
              }
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/JsonPatchOperations"
              }
            }
          }
        },
        "required": true
      },
      "PolicyCatalogCreateEvent": {
        "description": "PolicyCatalog create Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyCatalogCreateEvent"
            }
          }
        },
        "required": true
      },
      "PolicyCatalogAttributeValueChangeEvent": {
        "description": "PolicyCatalog attributeValueChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyCatalogAttributeValueChangeEvent"
            }
          }
        },
        "required": true
      },
      "PolicyCatalogDeleteEvent": {
        "description": "PolicyCatalog delete Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyCatalogDeleteEvent"
            }
          }
        },
        "required": true
      },
      "PolicyCatalogStatusChangeEvent": {
        "description": "PolicyCatalog statusChange Event payload",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyCatalogStateChangeEvent"
            }
          }
        },
        "required": true
      },
      "Hub_FVO": {
        "description": "Data containing the callback endpoint to deliver the information",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Hub_FVO"
            }
          }
        },
        "required": true
      }
    },
    "responses": {
      "200": {
        "description": "OK"
      },
      "202": {
        "description": "Accepted"
      },
      "204": {
        "description": "Deleted"
      },
      "400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "403": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "404": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "405": {
        "description": "Method Not allowed",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "409": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "500": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "501": {
        "description": "Not Implemented",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "503": {
        "description": "Service Unavailable",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "200ManagedPolicyArray": {
        "description": "Success",
        "headers": {
          "X-Total-Count": {
            "$ref": "#/components/headers/X-Total-Count"
          },
          "X-Result-Count": {
            "$ref": "#/components/headers/X-Result-Count"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ManagedPolicy"
              }
            }
          }
        }
      },
      "200ManagedPolicy_Get": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicy"
            }
          }
        }
      },
      "200ManagedPolicy_Patch": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicy"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicy"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManagedPolicy"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagedPolicy"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManagedPolicy"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagedPolicy"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          }
        }
      },
      "200ManagedPolicy_Put": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicy"
            }
          }
        }
      },
      "201ManagedPolicy": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicy"
            }
          }
        }
      },
      "200ManagedPolicyConditionArray": {
        "description": "Success",
        "headers": {
          "X-Total-Count": {
            "$ref": "#/components/headers/X-Total-Count"
          },
          "X-Result-Count": {
            "$ref": "#/components/headers/X-Result-Count"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ManagedPolicyCondition"
              }
            }
          }
        }
      },
      "200ManagedPolicyCondition_Get": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyCondition"
            }
          }
        }
      },
      "200ManagedPolicyCondition_Patch": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyCondition"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyCondition"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManagedPolicyCondition"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagedPolicyCondition"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManagedPolicyCondition"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagedPolicyCondition"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          }
        }
      },
      "200ManagedPolicyCondition_Put": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyCondition"
            }
          }
        }
      },
      "201ManagedPolicyCondition": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyCondition"
            }
          }
        }
      },
      "200ManagedPolicyEventArray": {
        "description": "Success",
        "headers": {
          "X-Total-Count": {
            "$ref": "#/components/headers/X-Total-Count"
          },
          "X-Result-Count": {
            "$ref": "#/components/headers/X-Result-Count"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ManagedPolicyEvent"
              }
            }
          }
        }
      },
      "200ManagedPolicyEvent_Get": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyEvent"
            }
          }
        }
      },
      "200ManagedPolicyEvent_Patch": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyEvent"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyEvent"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManagedPolicyEvent"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagedPolicyEvent"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManagedPolicyEvent"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagedPolicyEvent"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          }
        }
      },
      "200ManagedPolicyEvent_Put": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyEvent"
            }
          }
        }
      },
      "201ManagedPolicyEvent": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyEvent"
            }
          }
        }
      },
      "200ManagedPolicyExpressionArray": {
        "description": "Success",
        "headers": {
          "X-Total-Count": {
            "$ref": "#/components/headers/X-Total-Count"
          },
          "X-Result-Count": {
            "$ref": "#/components/headers/X-Result-Count"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ManagedPolicyExpression"
              }
            }
          }
        }
      },
      "200ManagedPolicyExpression_Get": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyExpression"
            }
          }
        }
      },
      "200ManagedPolicyExpression_Patch": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyExpression"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyExpression"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManagedPolicyExpression"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagedPolicyExpression"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManagedPolicyExpression"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagedPolicyExpression"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          }
        }
      },
      "200ManagedPolicyExpression_Put": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyExpression"
            }
          }
        }
      },
      "201ManagedPolicyExpression": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyExpression"
            }
          }
        }
      },
      "200ManagedPolicyOperatorArray": {
        "description": "Success",
        "headers": {
          "X-Total-Count": {
            "$ref": "#/components/headers/X-Total-Count"
          },
          "X-Result-Count": {
            "$ref": "#/components/headers/X-Result-Count"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ManagedPolicyOperator"
              }
            }
          }
        }
      },
      "200ManagedPolicyOperator_Get": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyOperator"
            }
          }
        }
      },
      "200ManagedPolicyOperator_Patch": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyOperator"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyOperator"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManagedPolicyOperator"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagedPolicyOperator"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManagedPolicyOperator"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagedPolicyOperator"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          }
        }
      },
      "200ManagedPolicyOperator_Put": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyOperator"
            }
          }
        }
      },
      "201ManagedPolicyOperator": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyOperator"
            }
          }
        }
      },
      "200ManagedPolicyVariableArray": {
        "description": "Success",
        "headers": {
          "X-Total-Count": {
            "$ref": "#/components/headers/X-Total-Count"
          },
          "X-Result-Count": {
            "$ref": "#/components/headers/X-Result-Count"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ManagedPolicyVariable"
              }
            }
          }
        }
      },
      "200ManagedPolicyVariable_Get": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyVariable"
            }
          }
        }
      },
      "200ManagedPolicyVariable_Patch": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyVariable"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyVariable"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManagedPolicyVariable"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagedPolicyVariable"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManagedPolicyVariable"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagedPolicyVariable"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          }
        }
      },
      "200ManagedPolicyVariable_Put": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyVariable"
            }
          }
        }
      },
      "201ManagedPolicyVariable": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyVariable"
            }
          }
        }
      },
      "200ManagedPolicyActionArray": {
        "description": "Success",
        "headers": {
          "X-Total-Count": {
            "$ref": "#/components/headers/X-Total-Count"
          },
          "X-Result-Count": {
            "$ref": "#/components/headers/X-Result-Count"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ManagedPolicyAction"
              }
            }
          }
        }
      },
      "200ManagedPolicyAction_Get": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyAction"
            }
          }
        }
      },
      "200ManagedPolicyAction_Patch": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyAction"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyAction"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManagedPolicyAction"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagedPolicyAction"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManagedPolicyAction"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagedPolicyAction"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          }
        }
      },
      "200ManagedPolicyAction_Put": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyAction"
            }
          }
        }
      },
      "201ManagedPolicyAction": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyAction"
            }
          }
        }
      },
      "200ManagedPolicyConstraintArray": {
        "description": "Success",
        "headers": {
          "X-Total-Count": {
            "$ref": "#/components/headers/X-Total-Count"
          },
          "X-Result-Count": {
            "$ref": "#/components/headers/X-Result-Count"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/ManagedPolicyConstraint"
              }
            }
          }
        }
      },
      "200ManagedPolicyConstraint_Get": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyConstraint"
            }
          }
        }
      },
      "200ManagedPolicyConstraint_Patch": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyConstraint"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyConstraint"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManagedPolicyConstraint"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagedPolicyConstraint"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/ManagedPolicyConstraint"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ManagedPolicyConstraint"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          }
        }
      },
      "200ManagedPolicyConstraint_Put": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyConstraint"
            }
          }
        }
      },
      "201ManagedPolicyConstraint": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/ManagedPolicyConstraint"
            }
          }
        }
      },
      "200PolicyDomainArray": {
        "description": "Success",
        "headers": {
          "X-Total-Count": {
            "$ref": "#/components/headers/X-Total-Count"
          },
          "X-Result-Count": {
            "$ref": "#/components/headers/X-Result-Count"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PolicyDomain"
              }
            }
          }
        }
      },
      "200PolicyDomain_Get": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyDomain"
            }
          }
        }
      },
      "200PolicyDomain_Patch": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyDomain"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyDomain"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PolicyDomain"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyDomain"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PolicyDomain"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyDomain"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          }
        }
      },
      "200PolicyDomain_Put": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyDomain"
            }
          }
        }
      },
      "201PolicyDomain": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyDomain"
            }
          }
        }
      },
      "200PolicyCatalogArray": {
        "description": "Success",
        "headers": {
          "X-Total-Count": {
            "$ref": "#/components/headers/X-Total-Count"
          },
          "X-Result-Count": {
            "$ref": "#/components/headers/X-Result-Count"
          }
        },
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/PolicyCatalog"
              }
            }
          }
        }
      },
      "200PolicyCatalog_Get": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyCatalog"
            }
          }
        }
      },
      "200PolicyCatalog_Patch": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyCatalog"
            }
          },
          "application/merge-patch+json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyCatalog"
            }
          },
          "application/json-patch+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PolicyCatalog"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyCatalog"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          },
          "application/json-patch-query+json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/PolicyCatalog"
                },
                {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PolicyCatalog"
                  }
                },
                {
                  "type": "string",
                  "nullable": true
                }
              ]
            }
          }
        }
      },
      "200PolicyCatalog_Put": {
        "description": "Success",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyCatalog"
            }
          }
        }
      },
      "201PolicyCatalog": {
        "description": "Created",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PolicyCatalog"
            }
          }
        }
      },
      "Error": {
        "description": "Error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Hub": {
        "description": "Notified",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Hub"
            }
          }
        }
      }
    },
    "headers": {
      "X-Total-Count": {
        "description": "Total number of items matching criteria",
        "schema": {
          "type": "integer"
        }
      },
      "X-Result-Count": {
        "description": "Actual number of items returned in the response body",
        "schema": {
          "type": "integer"
        }
      }
    },
    "securitySchemes": {},
    "examples": {}
  }
}